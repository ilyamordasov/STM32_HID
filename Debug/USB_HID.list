
USB_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08005fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005fb8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011035  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a4f  00000000  00000000  000310ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  000349e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169ea  00000000  00000000  00035728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000efd3  00000000  00000000  0004c112  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074fde  00000000  00000000  0005b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d00c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f88  00000000  00000000  000d0140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c38 	.word	0x08005c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005c38 	.word	0x08005c38

0800014c <MX_USB_Send_Notification>:
#include "USB_cmds.h"

#define USBD_PRODUCT_STRING_FS     "USB HID MANIPULATOR"

void MX_USB_Send_Notification(USB_HIDDEVICE_OS_t os) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a2      	sub	sp, #136	; 0x88
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	char buf[128];
	switch (os) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d011      	beq.n	8000180 <MX_USB_Send_Notification+0x34>
 800015c:	2b02      	cmp	r3, #2
 800015e:	d01c      	beq.n	800019a <MX_USB_Send_Notification+0x4e>
 8000160:	2b00      	cmp	r3, #0
 8000162:	d000      	beq.n	8000166 <MX_USB_Send_Notification+0x1a>
		case USB_HIDDEVICE_OS_OSX:
			/* GUI+T - Open Terminal */
			sprintf(buf, "osascript -e 'display notification MESSAGE with title %s'\r\n", USBD_PRODUCT_STRING_FS);
			MX_USB_SEND_Keyboard(buf);
			break;
		default: break;//Error_Handler();//assert("You have to use one of these OS:\r\nUSB_HIDDEVICE_OS_Windows\r\nUSB_HIDDEVICE_OS_Linux\r\nUSB_HIDDEVICE_OS_OSX");
 8000164:	e026      	b.n	80001b4 <MX_USB_Send_Notification+0x68>
			sprintf(buf, "notify-send %s Message\r\n", USBD_PRODUCT_STRING_FS);
 8000166:	f107 0308 	add.w	r3, r7, #8
 800016a:	4a14      	ldr	r2, [pc, #80]	; (80001bc <MX_USB_Send_Notification+0x70>)
 800016c:	4914      	ldr	r1, [pc, #80]	; (80001c0 <MX_USB_Send_Notification+0x74>)
 800016e:	4618      	mov	r0, r3
 8000170:	f005 f950 	bl	8005414 <siprintf>
			MX_USB_SEND_Keyboard(buf);
 8000174:	f107 0308 	add.w	r3, r7, #8
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f827 	bl	80001cc <MX_USB_SEND_Keyboard>
			break;
 800017e:	e019      	b.n	80001b4 <MX_USB_Send_Notification+0x68>
			sprintf(buf, "notify-send %s MESSAGE\r\n", USBD_PRODUCT_STRING_FS);
 8000180:	f107 0308 	add.w	r3, r7, #8
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <MX_USB_Send_Notification+0x70>)
 8000186:	490f      	ldr	r1, [pc, #60]	; (80001c4 <MX_USB_Send_Notification+0x78>)
 8000188:	4618      	mov	r0, r3
 800018a:	f005 f943 	bl	8005414 <siprintf>
			MX_USB_SEND_Keyboard(buf);
 800018e:	f107 0308 	add.w	r3, r7, #8
 8000192:	4618      	mov	r0, r3
 8000194:	f000 f81a 	bl	80001cc <MX_USB_SEND_Keyboard>
			break;
 8000198:	e00c      	b.n	80001b4 <MX_USB_Send_Notification+0x68>
			sprintf(buf, "osascript -e 'display notification MESSAGE with title %s'\r\n", USBD_PRODUCT_STRING_FS);
 800019a:	f107 0308 	add.w	r3, r7, #8
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <MX_USB_Send_Notification+0x70>)
 80001a0:	4909      	ldr	r1, [pc, #36]	; (80001c8 <MX_USB_Send_Notification+0x7c>)
 80001a2:	4618      	mov	r0, r3
 80001a4:	f005 f936 	bl	8005414 <siprintf>
			MX_USB_SEND_Keyboard(buf);
 80001a8:	f107 0308 	add.w	r3, r7, #8
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f80d 	bl	80001cc <MX_USB_SEND_Keyboard>
			break;
 80001b2:	bf00      	nop
	}
}
 80001b4:	bf00      	nop
 80001b6:	3788      	adds	r7, #136	; 0x88
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	08005c50 	.word	0x08005c50
 80001c0:	08005c64 	.word	0x08005c64
 80001c4:	08005c80 	.word	0x08005c80
 80001c8:	08005c9c 	.word	0x08005c9c

080001cc <MX_USB_SEND_Keyboard>:

void MX_USB_SEND_Keyboard(uint8_t buf) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]

}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e6:	f107 0310 	add.w	r3, r7, #16
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f4:	4b28      	ldr	r3, [pc, #160]	; (8000298 <MX_GPIO_Init+0xb8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a27      	ldr	r2, [pc, #156]	; (8000298 <MX_GPIO_Init+0xb8>)
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b25      	ldr	r3, [pc, #148]	; (8000298 <MX_GPIO_Init+0xb8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0310 	and.w	r3, r3, #16
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <MX_GPIO_Init+0xb8>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a21      	ldr	r2, [pc, #132]	; (8000298 <MX_GPIO_Init+0xb8>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_GPIO_Init+0xb8>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f003 0320 	and.w	r3, r3, #32
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <MX_GPIO_Init+0xb8>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <MX_GPIO_Init+0xb8>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <MX_GPIO_Init+0xb8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000242:	4816      	ldr	r0, [pc, #88]	; (800029c <MX_GPIO_Init+0xbc>)
 8000244:	f000 feb0 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800024c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000256:	2301      	movs	r3, #1
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	4619      	mov	r1, r3
 8000260:	480e      	ldr	r0, [pc, #56]	; (800029c <MX_GPIO_Init+0xbc>)
 8000262:	f000 fc41 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000266:	2304      	movs	r3, #4
 8000268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <MX_GPIO_Init+0xc0>)
 800026c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000272:	f107 0310 	add.w	r3, r7, #16
 8000276:	4619      	mov	r1, r3
 8000278:	480a      	ldr	r0, [pc, #40]	; (80002a4 <MX_GPIO_Init+0xc4>)
 800027a:	f000 fc35 	bl	8000ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	2008      	movs	r0, #8
 8000284:	f000 fbe0 	bl	8000a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000288:	2008      	movs	r0, #8
 800028a:	f000 fc09 	bl	8000aa0 <HAL_NVIC_EnableIRQ>

}
 800028e:	bf00      	nop
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	40011000 	.word	0x40011000
 80002a0:	10110000 	.word	0x10110000
 80002a4:	40010800 	.word	0x40010800

080002a8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_IWDG_Init+0x2c>)
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <MX_IWDG_Init+0x30>)
 80002b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_IWDG_Init+0x2c>)
 80002b4:	2203      	movs	r2, #3
 80002b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_IWDG_Init+0x2c>)
 80002ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_IWDG_Init+0x2c>)
 80002c2:	f000 feeb 	bl	800109c <HAL_IWDG_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80002cc:	f000 f880 	bl	80003d0 <Error_Handler>
  }

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000009c 	.word	0x2000009c
 80002d8:	40003000 	.word	0x40003000

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fa42 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f818 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f7ff ff7a 	bl	80001e0 <MX_GPIO_Init>
  MX_IWDG_Init();
 80002ec:	f7ff ffdc 	bl	80002a8 <MX_IWDG_Init>
  MX_TIM2_Init();
 80002f0:	f000 f97e 	bl	80005f0 <MX_TIM2_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_ENCODERMODE_TI2);
 80002f4:	2102      	movs	r1, #2
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x34>)
 80002f8:	f002 fc9e 	bl	8002c38 <HAL_TIM_Encoder_Start_IT>
  MX_USB_Send_Notification(6);
 80002fc:	2006      	movs	r0, #6
 80002fe:	f7ff ff25 	bl	800014c <MX_USB_Send_Notification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg);
 8000302:	4804      	ldr	r0, [pc, #16]	; (8000314 <main+0x38>)
 8000304:	f000 ff3a 	bl	800117c <HAL_IWDG_Refresh>
	  HAL_Delay(100);
 8000308:	2064      	movs	r0, #100	; 0x64
 800030a:	f000 fa8f 	bl	800082c <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 800030e:	e7f8      	b.n	8000302 <main+0x26>
 8000310:	200000a8 	.word	0x200000a8
 8000314:	2000009c 	.word	0x2000009c

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b094      	sub	sp, #80	; 0x50
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f005 f86c 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000348:	2309      	movs	r3, #9
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fc5a 	bl	8001c2c <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037e:	f000 f827 	bl	80003d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 ffb4 	bl	800230c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003aa:	f000 f811 	bl	80003d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ae:	2310      	movs	r3, #16
 80003b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f002 f9b7 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003c4:	f000 f804 	bl	80003d0 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3750      	adds	r7, #80	; 0x50
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <HardFault_Handler+0x4>

08000466 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <BusFault_Handler+0x4>

08000472 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <UsageFault_Handler+0x4>

08000478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f9a8 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80004ac:	2004      	movs	r0, #4
 80004ae:	f000 fdd3 	bl	8001058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))
 80004b2:	2104      	movs	r1, #4
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <EXTI2_IRQHandler+0x28>)
 80004b6:	f000 fd51 	bl	8000f5c <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d004      	beq.n	80004ca <EXTI2_IRQHandler+0x22>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <EXTI2_IRQHandler+0x2c>)
 80004c6:	f000 fda1 	bl	800100c <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40011000 	.word	0x40011000

080004d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004de:	f000 fe5c 	bl	800119a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200000ec 	.word	0x200000ec

080004ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <TIM2_IRQHandler+0x28>)
 80004f4:	f002 fc18 	bl	8002d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	uint32_t counter = TIM2->CNT;
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fe:	607b      	str	r3, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <TIM2_IRQHandler+0x2c>)
 8000506:	f000 fd81 	bl	800100c <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000a8 	.word	0x200000a8
 8000518:	40011000 	.word	0x40011000

0800051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <_sbrk+0x5c>)
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <_sbrk+0x60>)
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <_sbrk+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <_sbrk+0x64>)
 800053a:	4a12      	ldr	r2, [pc, #72]	; (8000584 <_sbrk+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	429a      	cmp	r2, r3
 800054a:	d207      	bcs.n	800055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800054c:	f004 ff30 	bl	80053b0 <__errno>
 8000550:	4602      	mov	r2, r0
 8000552:	230c      	movs	r3, #12
 8000554:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055a:	e009      	b.n	8000570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <_sbrk+0x64>)
 800056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20005000 	.word	0x20005000
 800057c:	00000400 	.word	0x00000400
 8000580:	2000008c 	.word	0x2000008c
 8000584:	20000360 	.word	0x20000360

08000588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <SystemInit+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <SystemInit+0x5c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <SystemInit+0x5c>)
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	4911      	ldr	r1, [pc, #68]	; (80005e4 <SystemInit+0x5c>)
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <SystemInit+0x60>)
 80005a0:	4013      	ands	r3, r2
 80005a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <SystemInit+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <SystemInit+0x5c>)
 80005aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <SystemInit+0x5c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <SystemInit+0x5c>)
 80005ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <SystemInit+0x5c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <SystemInit+0x5c>)
 80005c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <SystemInit+0x5c>)
 80005ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SystemInit+0x64>)
 80005d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005da:	609a      	str	r2, [r3, #8]
#endif 
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	f8ff0000 	.word	0xf8ff0000
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2224      	movs	r2, #36	; 0x24
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 ff00 	bl	8005404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_TIM2_Init+0xa0>)
 800060e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_TIM2_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_TIM2_Init+0xa0>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_TIM2_Init+0xa0>)
 8000622:	220a      	movs	r2, #10
 8000624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_TIM2_Init+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_TIM2_Init+0xa0>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000632:	2303      	movs	r3, #3
 8000634:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000642:	2305      	movs	r3, #5
 8000644:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800064a:	2301      	movs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_TIM2_Init+0xa0>)
 800065e:	f002 f96f 	bl	8002940 <HAL_TIM_Encoder_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000668:	f7ff feb2 	bl	80003d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_TIM2_Init+0xa0>)
 800067a:	f002 fd41 	bl	8003100 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000684:	f7ff fea4 	bl	80003d0 <Error_Handler>
  }

}
 8000688:	bf00      	nop
 800068a:	3730      	adds	r7, #48	; 0x30
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000a8 	.word	0x200000a8

08000694 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b2:	d12b      	bne.n	800070c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	4a16      	ldr	r2, [pc, #88]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	61d3      	str	r3, [r2, #28]
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_TIM_Encoder_MspInit+0x80>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 80006e4:	2303      	movs	r3, #3
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_TIM_Encoder_MspInit+0x84>)
 80006f8:	f000 f9f6 	bl	8000ae8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	201c      	movs	r0, #28
 8000702:	f000 f9a1 	bl	8000a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000706:	201c      	movs	r0, #28
 8000708:	f000 f9ca 	bl	8000aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800071c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800071e:	e003      	b.n	8000728 <LoopCopyDataInit>

08000720 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000722:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000724:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000726:	3104      	adds	r1, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800072c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800072e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000730:	d3f6      	bcc.n	8000720 <CopyDataInit>
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000734:	e002      	b.n	800073c <LoopFillZerobss>

08000736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000738:	f842 3b04 	str.w	r3, [r2], #4

0800073c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800073e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000740:	d3f9      	bcc.n	8000736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000742:	f7ff ff21 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000746:	f004 fe39 	bl	80053bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fdc7 	bl	80002dc <main>
  bx lr
 800074e:	4770      	bx	lr
  ldr r3, =_sidata
 8000750:	08005f48 	.word	0x08005f48
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000758:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800075c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000760:	2000035c 	.word	0x2000035c

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f945 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe34 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f98c 	bl	8000ad0 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d0:	f000 f93a 	bl	8000a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_IncTick+0x20>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000008 	.word	0x20000008
 8000814:	200000e8 	.word	0x200000e8

08000818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000e8 	.word	0x200000e8

0800082c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff fff0 	bl	8000818 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_Delay+0x40>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffe0 	bl	8000818 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000008 	.word	0x20000008

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <__NVIC_EnableIRQ+0x34>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e8:	f7ff ff90 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d00f      	beq.n	8000a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b06      	cmp	r3, #6
 8000a1a:	d00c      	beq.n	8000a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d009      	beq.n	8000a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d006      	beq.n	8000a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d003      	beq.n	8000a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a2e:	2192      	movs	r1, #146	; 0x92
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000a32:	f7ff fcd3 	bl	80003dc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff1a 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08005cd8 	.word	0x08005cd8

08000a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d903      	bls.n	8000a68 <HAL_NVIC_SetPriority+0x20>
 8000a60:	21aa      	movs	r1, #170	; 0xaa
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <HAL_NVIC_SetPriority+0x54>)
 8000a64:	f7ff fcba 	bl	80003dc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d903      	bls.n	8000a76 <HAL_NVIC_SetPriority+0x2e>
 8000a6e:	21ab      	movs	r1, #171	; 0xab
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <HAL_NVIC_SetPriority+0x54>)
 8000a72:	f7ff fcb3 	bl	80003dc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a76:	f7ff ff1f 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	6978      	ldr	r0, [r7, #20]
 8000a82:	f7ff ff6d 	bl	8000960 <NVIC_EncodePriority>
 8000a86:	4602      	mov	r2, r0
 8000a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff3c 	bl	800090c <__NVIC_SetPriority>
}
 8000a94:	bf00      	nop
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08005cd8 	.word	0x08005cd8

08000aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da03      	bge.n	8000aba <HAL_NVIC_EnableIRQ+0x1a>
 8000ab2:	21be      	movs	r1, #190	; 0xbe
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_NVIC_EnableIRQ+0x2c>)
 8000ab6:	f7ff fc91 	bl	80003dc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff08 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	08005cd8 	.word	0x08005cd8

08000ad0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff73 	bl	80009c4 <SysTick_Config>
 8000ade:	4603      	mov	r3, r0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a9c      	ldr	r2, [pc, #624]	; (8000d70 <HAL_GPIO_Init+0x288>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d013      	beq.n	8000b2a <HAL_GPIO_Init+0x42>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a9b      	ldr	r2, [pc, #620]	; (8000d74 <HAL_GPIO_Init+0x28c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d00f      	beq.n	8000b2a <HAL_GPIO_Init+0x42>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a9a      	ldr	r2, [pc, #616]	; (8000d78 <HAL_GPIO_Init+0x290>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00b      	beq.n	8000b2a <HAL_GPIO_Init+0x42>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a99      	ldr	r2, [pc, #612]	; (8000d7c <HAL_GPIO_Init+0x294>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x42>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a98      	ldr	r2, [pc, #608]	; (8000d80 <HAL_GPIO_Init+0x298>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x42>
 8000b22:	21bd      	movs	r1, #189	; 0xbd
 8000b24:	4897      	ldr	r0, [pc, #604]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000b26:	f7ff fc59 	bl	80003dc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x58>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	041b      	lsls	r3, r3, #16
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x60>
 8000b40:	21be      	movs	r1, #190	; 0xbe
 8000b42:	4890      	ldr	r0, [pc, #576]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000b44:	f7ff fc4a 	bl	80003dc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 81eb 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	f000 81e6 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b11      	cmp	r3, #17
 8000b62:	f000 81e1 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	f000 81dc 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	f000 81d7 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	4a82      	ldr	r2, [pc, #520]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	f000 81d1 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a80      	ldr	r2, [pc, #512]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	f000 81cb 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	4a7e      	ldr	r2, [pc, #504]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	f000 81c5 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a7c      	ldr	r2, [pc, #496]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	f000 81bf 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	4a7a      	ldr	r2, [pc, #488]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	f000 81b9 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4a78      	ldr	r2, [pc, #480]	; (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	f000 81b3 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	f000 81ae 	beq.w	8000f28 <HAL_GPIO_Init+0x440>
 8000bcc:	21bf      	movs	r1, #191	; 0xbf
 8000bce:	486d      	ldr	r0, [pc, #436]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000bd0:	f7ff fc04 	bl	80003dc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd4:	e1a8      	b.n	8000f28 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	69fa      	ldr	r2, [r7, #28]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	f040 8197 	bne.w	8000f22 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a5e      	ldr	r2, [pc, #376]	; (8000d70 <HAL_GPIO_Init+0x288>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d013      	beq.n	8000c24 <HAL_GPIO_Init+0x13c>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a5d      	ldr	r2, [pc, #372]	; (8000d74 <HAL_GPIO_Init+0x28c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d00f      	beq.n	8000c24 <HAL_GPIO_Init+0x13c>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a5c      	ldr	r2, [pc, #368]	; (8000d78 <HAL_GPIO_Init+0x290>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00b      	beq.n	8000c24 <HAL_GPIO_Init+0x13c>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a5b      	ldr	r2, [pc, #364]	; (8000d7c <HAL_GPIO_Init+0x294>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d007      	beq.n	8000c24 <HAL_GPIO_Init+0x13c>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a5a      	ldr	r2, [pc, #360]	; (8000d80 <HAL_GPIO_Init+0x298>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x13c>
 8000c1c:	21cd      	movs	r1, #205	; 0xcd
 8000c1e:	4859      	ldr	r0, [pc, #356]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000c20:	f7ff fbdc 	bl	80003dc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b12      	cmp	r3, #18
 8000c2a:	d065      	beq.n	8000cf8 <HAL_GPIO_Init+0x210>
 8000c2c:	2b12      	cmp	r3, #18
 8000c2e:	d80e      	bhi.n	8000c4e <HAL_GPIO_Init+0x166>
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d04c      	beq.n	8000cce <HAL_GPIO_Init+0x1e6>
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d804      	bhi.n	8000c42 <HAL_GPIO_Init+0x15a>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d072      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d01d      	beq.n	8000c7c <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c40:	e0b1      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	f000 80ac 	beq.w	8000da0 <HAL_GPIO_Init+0x2b8>
 8000c48:	2b11      	cmp	r3, #17
 8000c4a:	d02b      	beq.n	8000ca4 <HAL_GPIO_Init+0x1bc>
          break;
 8000c4c:	e0ab      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000c4e:	4a4f      	ldr	r2, [pc, #316]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d066      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
 8000c54:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d806      	bhi.n	8000c68 <HAL_GPIO_Init+0x180>
 8000c5a:	4a4b      	ldr	r2, [pc, #300]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d060      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
 8000c60:	4a4c      	ldr	r2, [pc, #304]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d05d      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
          break;
 8000c66:	e09e      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000c68:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d059      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d056      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
 8000c74:	4a48      	ldr	r2, [pc, #288]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d053      	beq.n	8000d22 <HAL_GPIO_Init+0x23a>
          break;
 8000c7a:	e094      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d00b      	beq.n	8000c9c <HAL_GPIO_Init+0x1b4>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1b4>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x1b4>
 8000c94:	21d5      	movs	r1, #213	; 0xd5
 8000c96:	483b      	ldr	r0, [pc, #236]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000c98:	f7ff fba0 	bl	80003dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e080      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d00b      	beq.n	8000cc4 <HAL_GPIO_Init+0x1dc>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1dc>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x1dc>
 8000cbc:	21dc      	movs	r1, #220	; 0xdc
 8000cbe:	4831      	ldr	r0, [pc, #196]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000cc0:	f7ff fb8c 	bl	80003dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e06b      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d00b      	beq.n	8000cee <HAL_GPIO_Init+0x206>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d007      	beq.n	8000cee <HAL_GPIO_Init+0x206>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x206>
 8000ce6:	21e3      	movs	r1, #227	; 0xe3
 8000ce8:	4826      	ldr	r0, [pc, #152]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000cea:	f7ff fb77 	bl	80003dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e056      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d00b      	beq.n	8000d18 <HAL_GPIO_Init+0x230>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x230>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x230>
 8000d10:	21ea      	movs	r1, #234	; 0xea
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000d14:	f7ff fb62 	bl	80003dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	330c      	adds	r3, #12
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e041      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_GPIO_Init+0x25a>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x25a>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x25a>
 8000d3a:	21f7      	movs	r1, #247	; 0xf7
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000d3e:	f7ff fb4d 	bl	80003dc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e02a      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d105      	bne.n	8000d64 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	611a      	str	r2, [r3, #16]
          break;
 8000d62:	e020      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d64:	2308      	movs	r3, #8
 8000d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	615a      	str	r2, [r3, #20]
          break;
 8000d6e:	e01a      	b.n	8000da6 <HAL_GPIO_Init+0x2be>
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40011400 	.word	0x40011400
 8000d80:	40011800 	.word	0x40011800
 8000d84:	08005d14 	.word	0x08005d14
 8000d88:	10110000 	.word	0x10110000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	10310000 	.word	0x10310000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d801      	bhi.n	8000db0 <HAL_GPIO_Init+0x2c8>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	e001      	b.n	8000db4 <HAL_GPIO_Init+0x2cc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3304      	adds	r3, #4
 8000db4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2bff      	cmp	r3, #255	; 0xff
 8000dba:	d802      	bhi.n	8000dc2 <HAL_GPIO_Init+0x2da>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x2e0>
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	3b08      	subs	r3, #8
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	210f      	movs	r1, #15
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	401a      	ands	r2, r3
 8000dda:	6a39      	ldr	r1, [r7, #32]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 8096 	beq.w	8000f22 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df6:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_GPIO_Init+0x458>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x458>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b4f      	ldr	r3, [pc, #316]	; (8000f40 <HAL_GPIO_Init+0x458>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x45c>)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_GPIO_Init+0x460>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x37a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <HAL_GPIO_Init+0x464>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x376>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_GPIO_Init+0x468>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x372>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a41      	ldr	r2, [pc, #260]	; (8000f54 <HAL_GPIO_Init+0x46c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x36e>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x37c>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x37c>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x37c>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x37c>
 8000e62:	2300      	movs	r3, #0
 8000e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e74:	4933      	ldr	r1, [pc, #204]	; (8000f44 <HAL_GPIO_Init+0x45c>)
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4931      	ldr	r1, [pc, #196]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	492c      	ldr	r1, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4927      	ldr	r1, [pc, #156]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	604b      	str	r3, [r1, #4]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4922      	ldr	r1, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	491d      	ldr	r1, [pc, #116]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	608b      	str	r3, [r1, #8]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4918      	ldr	r1, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	4913      	ldr	r1, [pc, #76]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60cb      	str	r3, [r1, #12]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x470>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	3301      	adds	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f47f ae4f 	bne.w	8000bd6 <HAL_GPIO_Init+0xee>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_GPIO_ReadPin+0x1c>
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	0c1b      	lsrs	r3, r3, #16
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <HAL_GPIO_ReadPin+0x26>
 8000f78:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <HAL_GPIO_ReadPin+0x48>)
 8000f7e:	f7ff fa2d 	bl	80003dc <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e001      	b.n	8000f98 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	08005d14 	.word	0x08005d14

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <HAL_GPIO_WritePin+0x20>
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	0c1b      	lsrs	r3, r3, #16
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x2a>
 8000fc8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <HAL_GPIO_WritePin+0x60>)
 8000fce:	f7ff fa05 	bl	80003dc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000fd2:	787b      	ldrb	r3, [r7, #1]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_WritePin+0x40>
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d004      	beq.n	8000fe8 <HAL_GPIO_WritePin+0x40>
 8000fde:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_GPIO_WritePin+0x60>)
 8000fe4:	f7ff f9fa 	bl	80003dc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	08005d14 	.word	0x08005d14

0800100c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_GPIO_TogglePin+0x1c>
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <HAL_GPIO_TogglePin+0x26>
 8001028:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_GPIO_TogglePin+0x48>)
 800102e:	f7ff f9d5 	bl	80003dc <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e002      	b.n	800104c <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	611a      	str	r2, [r3, #16]
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08005d14 	.word	0x08005d14

08001058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f806 	bl	8001088 <HAL_GPIO_EXTI_Callback>
  }
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e05d      	b.n	800116a <HAL_IWDG_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a30      	ldr	r2, [pc, #192]	; (8001174 <HAL_IWDG_Init+0xd8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d003      	beq.n	80010c0 <HAL_IWDG_Init+0x24>
 80010b8:	219d      	movs	r1, #157	; 0x9d
 80010ba:	482f      	ldr	r0, [pc, #188]	; (8001178 <HAL_IWDG_Init+0xdc>)
 80010bc:	f7ff f98e 	bl	80003dc <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01b      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d017      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d013      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d00f      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d00b      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d007      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d003      	beq.n	8001100 <HAL_IWDG_Init+0x64>
 80010f8:	219e      	movs	r1, #158	; 0x9e
 80010fa:	481f      	ldr	r0, [pc, #124]	; (8001178 <HAL_IWDG_Init+0xdc>)
 80010fc:	f7ff f96e 	bl	80003dc <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001108:	d303      	bcc.n	8001112 <HAL_IWDG_Init+0x76>
 800110a:	219f      	movs	r1, #159	; 0x9f
 800110c:	481a      	ldr	r0, [pc, #104]	; (8001178 <HAL_IWDG_Init+0xdc>)
 800110e:	f7ff f965 	bl	80003dc <assert_failed>

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800111a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f245 5255 	movw	r2, #21845	; 0x5555
 8001124:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6852      	ldr	r2, [r2, #4]
 800112e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6892      	ldr	r2, [r2, #8]
 8001138:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800113a:	f7ff fb6d 	bl	8000818 <HAL_GetTick>
 800113e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8001140:	e008      	b.n	8001154 <HAL_IWDG_Init+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001142:	f7ff fb69 	bl	8000818 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b30      	cmp	r3, #48	; 0x30
 800114e:	d901      	bls.n	8001154 <HAL_IWDG_Init+0xb8>
    {
      return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e00a      	b.n	800116a <HAL_IWDG_Init+0xce>
  while (hiwdg->Instance->SR != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f1      	bne.n	8001142 <HAL_IWDG_Init+0xa6>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001166:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40003000 	.word	0x40003000
 8001178:	08005d50 	.word	0x08005d50

0800117c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800118c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fee1 	bl	8003f6e <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011b6:	d102      	bne.n	80011be <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fa9d 	bl	80016f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fed3 	bl	8003f6e <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d112      	bne.n	80011fa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f003 ff7f 	bl	80050f0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f8de 	bl	80013b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 feb5 	bl	8003f6e <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800120e:	d10b      	bne.n	8001228 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001222:	b292      	uxth	r2, r2
 8001224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fe9e 	bl	8003f6e <USB_ReadInterrupts>
 8001232:	4603      	mov	r3, r0
 8001234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800123c:	d10b      	bne.n	8001256 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fe87 	bl	8003f6e <USB_ReadInterrupts>
 8001260:	4603      	mov	r3, r0
 8001262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126a:	d126      	bne.n	80012ba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0204 	bic.w	r2, r2, #4
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	b292      	uxth	r2, r2
 8001298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f003 ff5f 	bl	8005160 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012b4:	b292      	uxth	r2, r2
 80012b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fe55 	bl	8003f6e <USB_ReadInterrupts>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ce:	d13d      	bne.n	800134c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0204 	orr.w	r2, r2, #4
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fe26 	bl	8003f6e <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800132c:	d10b      	bne.n	8001346 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f003 fef0 	bl	800512c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fe0c 	bl	8003f6e <USB_ReadInterrupts>
 8001356:	4603      	mov	r3, r0
 8001358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001360:	d10e      	bne.n	8001380 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001374:	b292      	uxth	r2, r2
 8001376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f003 feaa 	bl	80050d4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fdf2 	bl	8003f6e <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d10b      	bne.n	80013ae <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a8:	b292      	uxth	r2, r2
 80013aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_PCD_SetAddress+0x1a>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e013      	b.n	80013f8 <HAL_PCD_SetAddress+0x42>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	78fa      	ldrb	r2, [r7, #3]
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fdad 	bl	8003f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	70fb      	strb	r3, [r7, #3]
 8001412:	460b      	mov	r3, r1
 8001414:	803b      	strh	r3, [r7, #0]
 8001416:	4613      	mov	r3, r2
 8001418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800141e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da0b      	bge.n	800143e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	015b      	lsls	r3, r3, #5
 800142e:	3328      	adds	r3, #40	; 0x28
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	705a      	strb	r2, [r3, #1]
 800143c:	e00b      	b.n	8001456 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	015b      	lsls	r3, r3, #5
 8001446:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001462:	883a      	ldrh	r2, [r7, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29a      	uxth	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001480:	78bb      	ldrb	r3, [r7, #2]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d102      	bne.n	800148c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_PCD_EP_Open+0x9a>
 8001496:	2302      	movs	r3, #2
 8001498:	e00e      	b.n	80014b8 <HAL_PCD_EP_Open+0xb8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68f9      	ldr	r1, [r7, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fed1 	bl	8003250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80014b6:	7afb      	ldrb	r3, [r7, #11]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	460b      	mov	r3, r1
 80014ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2200      	movs	r2, #0
 80014f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	b2da      	uxtb	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6979      	ldr	r1, [r7, #20]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 f988 	bl	800382c <USB_EPStartXfer>
 800151c:	e005      	b.n	800152a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6979      	ldr	r1, [r7, #20]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 f981 	bl	800382c <USB_EPStartXfer>
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	460b      	mov	r3, r1
 8001542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	3328      	adds	r3, #40	; 0x28
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2201      	movs	r2, #1
 800156a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	b2da      	uxtb	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 f94f 	bl	800382c <USB_EPStartXfer>
 800158e:	e005      	b.n	800159c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6979      	ldr	r1, [r7, #20]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f948 	bl	800382c <USB_EPStartXfer>
  }

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	f003 0207 	and.w	r2, r3, #7
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d901      	bls.n	80015c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e046      	b.n	8001652 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0b      	bge.n	80015e4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	3328      	adds	r3, #40	; 0x28
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
 80015e2:	e009      	b.n	80015f8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_PCD_EP_SetStall+0x72>
 8001614:	2302      	movs	r3, #2
 8001616:	e01c      	b.n	8001652 <HAL_PCD_EP_SetStall+0xac>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fbb8 	bl	8003d9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001640:	4619      	mov	r1, r3
 8001642:	4610      	mov	r0, r2
 8001644:	f002 fca2 	bl	8003f8c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 020f 	and.w	r2, r3, #15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d901      	bls.n	8001678 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e03a      	b.n	80016ee <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0b      	bge.n	8001698 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	3328      	adds	r3, #40	; 0x28
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	705a      	strb	r2, [r3, #1]
 8001696:	e00b      	b.n	80016b0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	015b      	lsls	r3, r3, #5
 80016a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_PCD_EP_ClrStall+0x76>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e00e      	b.n	80016ee <HAL_PCD_EP_ClrStall+0x94>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fb9e 	bl	8003e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001700:	e282      	b.n	8001c08 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800170a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001716:	7d7b      	ldrb	r3, [r7, #21]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 8142 	bne.w	80019a2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800171e:	8afb      	ldrh	r3, [r7, #22]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d151      	bne.n	80017cc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001738:	b29c      	uxth	r4, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001746:	b29b      	uxth	r3, r3
 8001748:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3328      	adds	r3, #40	; 0x28
 800174e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001758:	b29b      	uxth	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	3302      	adds	r3, #2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	441a      	add	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f003 fc8a 	bl	80050a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8234 	beq.w	8001c08 <PCD_EP_ISR_Handler+0x510>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 822f 	bne.w	8001c08 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b292      	uxth	r2, r2
 80017be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017ca:	e21d      	b.n	8001c08 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017dc:	8a7b      	ldrh	r3, [r7, #18]
 80017de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d033      	beq.n	800184e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	3306      	adds	r3, #6
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001824:	b29b      	uxth	r3, r3
 8001826:	f002 fc00 	bl	800402a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29a      	uxth	r2, r3
 8001832:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001836:	4013      	ands	r3, r2
 8001838:	b29c      	uxth	r4, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f003 fc03 	bl	8005052 <HAL_PCD_SetupStageCallback>
 800184c:	e1dc      	b.n	8001c08 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800184e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f280 81d8 	bge.w	8001c08 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29a      	uxth	r2, r3
 8001860:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001864:	4013      	ands	r3, r2
 8001866:	b29c      	uxth	r4, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001870:	b292      	uxth	r2, r2
 8001872:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	3306      	adds	r3, #6
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1e4>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6959      	ldr	r1, [r3, #20]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f002 fbb2 	bl	800402a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f003 fbcd 	bl	8005076 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461c      	mov	r4, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	441c      	add	r4, r3
 80018ee:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80018f2:	461c      	mov	r4, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10e      	bne.n	800191a <PCD_EP_ISR_Handler+0x222>
 80018fc:	8823      	ldrh	r3, [r4, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001904:	b29b      	uxth	r3, r3
 8001906:	8023      	strh	r3, [r4, #0]
 8001908:	8823      	ldrh	r3, [r4, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001914:	b29b      	uxth	r3, r3
 8001916:	8023      	strh	r3, [r4, #0]
 8001918:	e02d      	b.n	8001976 <PCD_EP_ISR_Handler+0x27e>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b3e      	cmp	r3, #62	; 0x3e
 8001920:	d812      	bhi.n	8001948 <PCD_EP_ISR_Handler+0x250>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <PCD_EP_ISR_Handler+0x244>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3301      	adds	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	b29b      	uxth	r3, r3
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	b29b      	uxth	r3, r3
 8001944:	8023      	strh	r3, [r4, #0]
 8001946:	e016      	b.n	8001976 <PCD_EP_ISR_Handler+0x27e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <PCD_EP_ISR_Handler+0x26a>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	3b01      	subs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	b29b      	uxth	r3, r3
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	b29b      	uxth	r3, r3
 800196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001972:	b29b      	uxth	r3, r3
 8001974:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	b29c      	uxth	r4, r3
 8001988:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800198c:	b29c      	uxth	r4, r3
 800198e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001992:	b29c      	uxth	r4, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4ba2      	ldr	r3, [pc, #648]	; (8001c24 <PCD_EP_ISR_Handler+0x52c>)
 800199a:	4323      	orrs	r3, r4
 800199c:	b29b      	uxth	r3, r3
 800199e:	8013      	strh	r3, [r2, #0]
 80019a0:	e132      	b.n	8001c08 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	7d7b      	ldrb	r3, [r7, #21]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f280 80d1 	bge.w	8001b5e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	7d7b      	ldrb	r3, [r7, #21]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019d0:	4013      	ands	r3, r2
 80019d2:	b29c      	uxth	r4, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	7d7b      	ldrb	r3, [r7, #21]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80019e4:	b292      	uxth	r2, r2
 80019e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019e8:	7d7b      	ldrb	r3, [r7, #21]
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	7b1b      	ldrb	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d121      	bne.n	8001a42 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	3306      	adds	r3, #6
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a26:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d072      	beq.n	8001b14 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6959      	ldr	r1, [r3, #20]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	88da      	ldrh	r2, [r3, #6]
 8001a3a:	8bfb      	ldrh	r3, [r7, #30]
 8001a3c:	f002 faf5 	bl	800402a <USB_ReadPMA>
 8001a40:	e068      	b.n	8001b14 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d021      	beq.n	8001aa0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3302      	adds	r3, #2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a84:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001a86:	8bfb      	ldrh	r3, [r7, #30]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d02a      	beq.n	8001ae2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6959      	ldr	r1, [r3, #20]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	891a      	ldrh	r2, [r3, #8]
 8001a98:	8bfb      	ldrh	r3, [r7, #30]
 8001a9a:	f002 fac6 	bl	800402a <USB_ReadPMA>
 8001a9e:	e020      	b.n	8001ae2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3306      	adds	r3, #6
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001aca:	8bfb      	ldrh	r3, [r7, #30]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6959      	ldr	r1, [r3, #20]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	895a      	ldrh	r2, [r3, #10]
 8001adc:	8bfb      	ldrh	r3, [r7, #30]
 8001ade:	f002 faa4 	bl	800402a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afc:	b29c      	uxth	r4, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	441a      	add	r2, r3
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <PCD_EP_ISR_Handler+0x530>)
 8001b0e:	4323      	orrs	r3, r4
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	8bfb      	ldrh	r3, [r7, #30]
 8001b1a:	441a      	add	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	8bfb      	ldrh	r3, [r7, #30]
 8001b26:	441a      	add	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <PCD_EP_ISR_Handler+0x446>
 8001b34:	8bfa      	ldrh	r2, [r7, #30]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d206      	bcs.n	8001b4c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f003 fa96 	bl	8005076 <HAL_PCD_DataOutStageCallback>
 8001b4a:	e008      	b.n	8001b5e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	7819      	ldrb	r1, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fcb1 	bl	80014c0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b5e:	8a7b      	ldrh	r3, [r7, #18]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d04f      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b68:	7d7b      	ldrb	r3, [r7, #21]
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	3328      	adds	r3, #40	; 0x28
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	7d7b      	ldrb	r3, [r7, #21]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8c:	b29c      	uxth	r4, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	7d7b      	ldrb	r3, [r7, #21]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	441a      	add	r2, r3
 8001b9a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	441a      	add	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f003 fa59 	bl	80050a6 <HAL_PCD_DataInStageCallback>
 8001bf4:	e008      	b.n	8001c08 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fc96 	bl	8001534 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f6ff ad74 	blt.w	8001702 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3724      	adds	r7, #36	; 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	ffff8080 	.word	0xffff8080
 8001c28:	ffff80c0 	.word	0xffff80c0

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e35c      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x54>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x54>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d110      	bne.n	8001c80 <HAL_RCC_OscConfig+0x54>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x54>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d104      	bne.n	8001c80 <HAL_RCC_OscConfig+0x54>
 8001c76:	f240 1167 	movw	r1, #359	; 0x167
 8001c7a:	48a5      	ldr	r0, [pc, #660]	; (8001f10 <HAL_RCC_OscConfig+0x2e4>)
 8001c7c:	f7fe fbae 	bl	80003dc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 809a 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x88>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x88>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d004      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x88>
 8001caa:	f240 116d 	movw	r1, #365	; 0x16d
 8001cae:	4898      	ldr	r0, [pc, #608]	; (8001f10 <HAL_RCC_OscConfig+0x2e4>)
 8001cb0:	f7fe fb94 	bl	80003dc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb4:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00c      	beq.n	8001cda <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d112      	bne.n	8001cf2 <HAL_RCC_OscConfig+0xc6>
 8001ccc:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d06c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x194>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d168      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e302      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0xde>
 8001cfc:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a84      	ldr	r2, [pc, #528]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e02e      	b.n	8001d68 <HAL_RCC_OscConfig+0x13c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x100>
 8001d12:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7f      	ldr	r2, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b7d      	ldr	r3, [pc, #500]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7c      	ldr	r2, [pc, #496]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0x13c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x124>
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a76      	ldr	r2, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b74      	ldr	r3, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a73      	ldr	r2, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x13c>
 8001d50:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6f      	ldr	r2, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6c      	ldr	r2, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fd52 	bl	8000818 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7fe fd4e 	bl	8000818 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2b6      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x14c>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fd3e 	bl	8000818 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fd3a 	bl	8000818 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e2a2      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x174>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d079      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1bc>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d004      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1bc>
 8001dde:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001de2:	484b      	ldr	r0, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x2e4>)
 8001de4:	f7fe fafa 	bl	80003dc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b1f      	cmp	r3, #31
 8001dee:	d904      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1ce>
 8001df0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001df4:	4846      	ldr	r0, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x2e4>)
 8001df6:	f7fe faf1 	bl	80003dc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x220>
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x20a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e260      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4933      	ldr	r1, [pc, #204]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_OscConfig+0x2ec>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fcdd 	bl	8000818 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7fe fcd9 	bl	8000818 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e241      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x2ec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fcbc 	bl	8000818 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fcb8 	bl	8000818 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e220      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_RCC_OscConfig+0x2e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d048      	beq.n	8001f60 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2bc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d004      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2bc>
 8001ede:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001ee2:	480b      	ldr	r0, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x2e4>)
 8001ee4:	f7fe fa7a 	bl	80003dc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d021      	beq.n	8001f34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_OscConfig+0x2f0>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fc8f 	bl	8000818 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efc:	e010      	b.n	8001f20 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fc8b 	bl	8000818 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d909      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1f3      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
 8001f10:	08005d8c 	.word	0x08005d8c
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f20:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0e8      	beq.n	8001efe <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f000 fbdf 	bl	80026f0 <RCC_Delay>
 8001f32:	e015      	b.n	8001f60 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_OscConfig+0x498>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fc6d 	bl	8000818 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe fc69 	bl	8000818 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1d1      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80c0 	beq.w	80020ee <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x368>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d008      	beq.n	8001f94 <HAL_RCC_OscConfig+0x368>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d004      	beq.n	8001f94 <HAL_RCC_OscConfig+0x368>
 8001f8a:	f240 2111 	movw	r1, #529	; 0x211
 8001f8e:	484e      	ldr	r0, [pc, #312]	; (80020c8 <HAL_RCC_OscConfig+0x49c>)
 8001f90:	f7fe fa24 	bl	80003dc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f94:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x4a0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d118      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x4a0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3f      	ldr	r2, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x4a0>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd4:	f7fe fc20 	bl	8000818 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fc1c 	bl	8000818 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e184      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_RCC_OscConfig+0x4a0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x3e4>
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	e02d      	b.n	800206c <HAL_RCC_OscConfig+0x440>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x406>
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800202a:	f023 0304 	bic.w	r3, r3, #4
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x440>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x428>
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x440>
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe fbd0 	bl	8000818 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fbcc 	bl	8000818 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e132      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x494>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ee      	beq.n	800207c <HAL_RCC_OscConfig+0x450>
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fbba 	bl	8000818 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fbb6 	bl	8000818 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d90a      	bls.n	80020d0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e11c      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420480 	.word	0x42420480
 80020c8:	08005d8c 	.word	0x08005d8c
 80020cc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e5      	bne.n	80020a8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b87      	ldr	r3, [pc, #540]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a86      	ldr	r2, [pc, #536]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_RCC_OscConfig+0x4e4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d008      	beq.n	8002110 <HAL_RCC_OscConfig+0x4e4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d004      	beq.n	8002110 <HAL_RCC_OscConfig+0x4e4>
 8002106:	f240 21af 	movw	r1, #687	; 0x2af
 800210a:	487e      	ldr	r0, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x6d8>)
 800210c:	f7fe f966 	bl	80003dc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80ee 	beq.w	80022f6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211a:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	f000 80ce 	beq.w	80022c4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b02      	cmp	r3, #2
 800212e:	f040 80b2 	bne.w	8002296 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_OscConfig+0x522>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002142:	d004      	beq.n	800214e <HAL_RCC_OscConfig+0x522>
 8002144:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002148:	486e      	ldr	r0, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x6d8>)
 800214a:	f7fe f947 	bl	80003dc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04a      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800215e:	d045      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002168:	d040      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002172:	d03b      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217c:	d036      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002186:	d031      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002190:	d02c      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800219a:	d027      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021a4:	d022      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021ae:	d01d      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021b8:	d018      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021cc:	d00e      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80021d6:	d009      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80021e0:	d004      	beq.n	80021ec <HAL_RCC_OscConfig+0x5c0>
 80021e2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80021e6:	4847      	ldr	r0, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x6d8>)
 80021e8:	f7fe f8f8 	bl	80003dc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_OscConfig+0x6dc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fb11 	bl	8000818 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe fb0d 	bl	8000818 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e075      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_OscConfig+0x612>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002232:	d004      	beq.n	800223e <HAL_RCC_OscConfig+0x612>
 8002234:	f240 21cf 	movw	r1, #719	; 0x2cf
 8002238:	4832      	ldr	r0, [pc, #200]	; (8002304 <HAL_RCC_OscConfig+0x6d8>)
 800223a:	f7fe f8cf 	bl	80003dc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	492d      	ldr	r1, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a19      	ldr	r1, [r3, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	430b      	orrs	r3, r1
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x6dc>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fad3 	bl	8000818 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe facf 	bl	8000818 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e037      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x64a>
 8002294:	e02f      	b.n	80022f6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_RCC_OscConfig+0x6dc>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fabc 	bl	8000818 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fab8 	bl	8000818 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e020      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x678>
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x6d4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08005d8c 	.word	0x08005d8c
 8002308:	42420060 	.word	0x42420060

0800230c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e176      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d116      	bne.n	800235a <HAL_RCC_ClockConfig+0x4e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d110      	bne.n	800235a <HAL_RCC_ClockConfig+0x4e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_RCC_ClockConfig+0x4e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_RCC_ClockConfig+0x4e>
 8002350:	f44f 714e 	mov.w	r1, #824	; 0x338
 8002354:	4874      	ldr	r0, [pc, #464]	; (8002528 <HAL_RCC_ClockConfig+0x21c>)
 8002356:	f7fe f841 	bl	80003dc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCC_ClockConfig+0x6a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d007      	beq.n	8002376 <HAL_RCC_ClockConfig+0x6a>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d004      	beq.n	8002376 <HAL_RCC_ClockConfig+0x6a>
 800236c:	f240 3139 	movw	r1, #825	; 0x339
 8002370:	486d      	ldr	r0, [pc, #436]	; (8002528 <HAL_RCC_ClockConfig+0x21c>)
 8002372:	f7fe f833 	bl	80003dc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d910      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	4967      	ldr	r1, [pc, #412]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e133      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d049      	beq.n	8002446 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80023c4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d6:	4b56      	ldr	r3, [pc, #344]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a55      	ldr	r2, [pc, #340]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80023dc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d020      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b90      	cmp	r3, #144	; 0x90
 80023f8:	d01c      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002400:	d018      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2bb0      	cmp	r3, #176	; 0xb0
 8002408:	d014      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2bc0      	cmp	r3, #192	; 0xc0
 8002410:	d010      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2bd0      	cmp	r3, #208	; 0xd0
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2be0      	cmp	r3, #224	; 0xe0
 8002420:	d008      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2bf0      	cmp	r3, #240	; 0xf0
 8002428:	d004      	beq.n	8002434 <HAL_RCC_ClockConfig+0x128>
 800242a:	f240 315f 	movw	r1, #863	; 0x35f
 800242e:	483e      	ldr	r0, [pc, #248]	; (8002528 <HAL_RCC_ClockConfig+0x21c>)
 8002430:	f7fd ffd4 	bl	80003dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	493b      	ldr	r1, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d051      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_ClockConfig+0x168>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d008      	beq.n	8002474 <HAL_RCC_ClockConfig+0x168>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d004      	beq.n	8002474 <HAL_RCC_ClockConfig+0x168>
 800246a:	f240 3166 	movw	r1, #870	; 0x366
 800246e:	482e      	ldr	r0, [pc, #184]	; (8002528 <HAL_RCC_ClockConfig+0x21c>)
 8002470:	f7fd ffb4 	bl	80003dc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d115      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0c0      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b4      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0ac      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 0203 	bic.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	491b      	ldr	r1, [pc, #108]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c6:	f7fe f9a7 	bl	8000818 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f7fe f9a3 	bl	8000818 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e094      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x224>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 020c 	and.w	r2, r3, #12
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d1eb      	bne.n	80024ce <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d217      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_ClockConfig+0x220>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d008      	beq.n	8002534 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e073      	b.n	800260e <HAL_RCC_ClockConfig+0x302>
 8002526:	bf00      	nop
 8002528:	08005d8c 	.word	0x08005d8c
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d025      	beq.n	800258c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d018      	beq.n	800257a <HAL_RCC_ClockConfig+0x26e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d013      	beq.n	800257a <HAL_RCC_ClockConfig+0x26e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800255a:	d00e      	beq.n	800257a <HAL_RCC_ClockConfig+0x26e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002564:	d009      	beq.n	800257a <HAL_RCC_ClockConfig+0x26e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800256e:	d004      	beq.n	800257a <HAL_RCC_ClockConfig+0x26e>
 8002570:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002574:	4828      	ldr	r0, [pc, #160]	; (8002618 <HAL_RCC_ClockConfig+0x30c>)
 8002576:	f7fd ff31 	bl	80003dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_RCC_ClockConfig+0x310>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	4925      	ldr	r1, [pc, #148]	; (800261c <HAL_RCC_ClockConfig+0x310>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d026      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d018      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2c6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d013      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2c6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025b2:	d00e      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2c6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2c6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025c6:	d004      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2c6>
 80025c8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80025cc:	4812      	ldr	r0, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x30c>)
 80025ce:	f7fd ff05 	bl	80003dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x310>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x310>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4601      	mov	r1, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x310>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x314>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	fa21 f303 	lsr.w	r3, r1, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x318>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x31c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe f8c4 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	08005d8c 	.word	0x08005d8c
 800261c:	40021000 	.word	0x40021000
 8002620:	08005e9c 	.word	0x08005e9c
 8002624:	20000000 	.word	0x20000000
 8002628:	20000004 	.word	0x20000004

0800262c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b490      	push	{r4, r7}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002634:	1d3c      	adds	r4, r7, #4
 8002636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x40>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x46>
 800266a:	e02d      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800266e:	623b      	str	r3, [r7, #32]
      break;
 8002670:	e02d      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800267e:	4413      	add	r3, r2
 8002680:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002684:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0c5b      	lsrs	r3, r3, #17
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800269e:	4413      	add	r3, r2
 80026a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026aa:	fb02 f203 	mul.w	r2, r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e004      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	623b      	str	r3, [r7, #32]
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc90      	pop	{r4, r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	08005dc4 	.word	0x08005dc4
 80026e0:	08005dd4 	.word	0x08005dd4
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	003d0900 	.word	0x003d0900

080026f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <RCC_Delay+0x34>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <RCC_Delay+0x38>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800270c:	bf00      	nop
  }
  while (Delay --);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f9      	bne.n	800270c <RCC_Delay+0x1c>
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10f      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002760:	216c      	movs	r1, #108	; 0x6c
 8002762:	4873      	ldr	r0, [pc, #460]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002764:	f7fd fe3a 	bl	80003dc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8095 	beq.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002786:	d00d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279a:	d003      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800279c:	2172      	movs	r1, #114	; 0x72
 800279e:	4864      	ldr	r0, [pc, #400]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80027a0:	f7fd fe1c 	bl	80003dc <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	4a5e      	ldr	r2, [pc, #376]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	61d3      	str	r3, [r2, #28]
 80027c0:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7fe f816 	bl	8000818 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe f812 	bl	8000818 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e092      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280e:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02e      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x150>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d027      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282c:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800283c:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002842:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d014      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fd ffe1 	bl	8000818 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fd ffdd 	bl	8000818 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05b      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	492a      	ldr	r1, [pc, #168]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800288a:	4313      	orrs	r3, r2
 800288c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01f      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028bc:	d00d      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028d0:	d003      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80028d2:	21b9      	movs	r1, #185	; 0xb9
 80028d4:	4816      	ldr	r0, [pc, #88]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80028d6:	f7fd fd81 	bl	80003dc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4913      	ldr	r1, [pc, #76]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800290a:	f240 1115 	movw	r1, #277	; 0x115
 800290e:	4808      	ldr	r0, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002910:	f7fd fd64 	bl	80003dc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	08005dd8 	.word	0x08005dd8
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420440 	.word	0x42420440

08002940 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e16c      	b.n	8002c2e <HAL_TIM_Encoder_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d014      	beq.n	8002986 <HAL_TIM_Encoder_Init+0x46>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b10      	cmp	r3, #16
 8002962:	d010      	beq.n	8002986 <HAL_TIM_Encoder_Init+0x46>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b20      	cmp	r3, #32
 800296a:	d00c      	beq.n	8002986 <HAL_TIM_Encoder_Init+0x46>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b40      	cmp	r3, #64	; 0x40
 8002972:	d008      	beq.n	8002986 <HAL_TIM_Encoder_Init+0x46>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d004      	beq.n	8002986 <HAL_TIM_Encoder_Init+0x46>
 800297c:	f640 2131 	movw	r1, #2609	; 0xa31
 8002980:	486d      	ldr	r0, [pc, #436]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002982:	f7fd fd2b 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00e      	beq.n	80029ac <HAL_TIM_Encoder_Init+0x6c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	d009      	beq.n	80029ac <HAL_TIM_Encoder_Init+0x6c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d004      	beq.n	80029ac <HAL_TIM_Encoder_Init+0x6c>
 80029a2:	f640 2132 	movw	r1, #2610	; 0xa32
 80029a6:	4864      	ldr	r0, [pc, #400]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 80029a8:	f7fd fd18 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_TIM_Encoder_Init+0x86>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d004      	beq.n	80029c6 <HAL_TIM_Encoder_Init+0x86>
 80029bc:	f640 2133 	movw	r1, #2611	; 0xa33
 80029c0:	485d      	ldr	r0, [pc, #372]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 80029c2:	f7fd fd0b 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a5c      	ldr	r2, [pc, #368]	; (8002b3c <HAL_TIM_Encoder_Init+0x1fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_TIM_Encoder_Init+0xb8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d00e      	beq.n	80029f8 <HAL_TIM_Encoder_Init+0xb8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_TIM_Encoder_Init+0x200>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIM_Encoder_Init+0xb8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_TIM_Encoder_Init+0x204>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_Encoder_Init+0xb8>
 80029ee:	f640 2134 	movw	r1, #2612	; 0xa34
 80029f2:	4851      	ldr	r0, [pc, #324]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 80029f4:	f7fd fcf2 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d00c      	beq.n	8002a1a <HAL_TIM_Encoder_Init+0xda>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d008      	beq.n	8002a1a <HAL_TIM_Encoder_Init+0xda>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_Encoder_Init+0xda>
 8002a10:	f640 2135 	movw	r1, #2613	; 0xa35
 8002a14:	4848      	ldr	r0, [pc, #288]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002a16:	f7fd fce1 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00c      	beq.n	8002a3c <HAL_TIM_Encoder_Init+0xfc>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d008      	beq.n	8002a3c <HAL_TIM_Encoder_Init+0xfc>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d004      	beq.n	8002a3c <HAL_TIM_Encoder_Init+0xfc>
 8002a32:	f640 2136 	movw	r1, #2614	; 0xa36
 8002a36:	4840      	ldr	r0, [pc, #256]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002a38:	f7fd fcd0 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00c      	beq.n	8002a5e <HAL_TIM_Encoder_Init+0x11e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_TIM_Encoder_Init+0x11e>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d004      	beq.n	8002a5e <HAL_TIM_Encoder_Init+0x11e>
 8002a54:	f640 2137 	movw	r1, #2615	; 0xa37
 8002a58:	4837      	ldr	r0, [pc, #220]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002a5a:	f7fd fcbf 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_TIM_Encoder_Init+0x140>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d008      	beq.n	8002a80 <HAL_TIM_Encoder_Init+0x140>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b0a      	cmp	r3, #10
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Encoder_Init+0x140>
 8002a76:	f640 2138 	movw	r1, #2616	; 0xa38
 8002a7a:	482f      	ldr	r0, [pc, #188]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002a7c:	f7fd fcae 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00c      	beq.n	8002aa2 <HAL_TIM_Encoder_Init+0x162>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_TIM_Encoder_Init+0x162>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_Encoder_Init+0x162>
 8002a98:	f640 2139 	movw	r1, #2617	; 0xa39
 8002a9c:	4826      	ldr	r0, [pc, #152]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002a9e:	f7fd fc9d 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_TIM_Encoder_Init+0x18c>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_Encoder_Init+0x18c>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d008      	beq.n	8002acc <HAL_TIM_Encoder_Init+0x18c>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_Encoder_Init+0x18c>
 8002ac2:	f640 213a 	movw	r1, #2618	; 0xa3a
 8002ac6:	481c      	ldr	r0, [pc, #112]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002ac8:	f7fd fc88 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_Encoder_Init+0x1b6>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_TIM_Encoder_Init+0x1b6>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d008      	beq.n	8002af6 <HAL_TIM_Encoder_Init+0x1b6>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_Encoder_Init+0x1b6>
 8002aec:	f640 213b 	movw	r1, #2619	; 0xa3b
 8002af0:	4811      	ldr	r0, [pc, #68]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002af2:	f7fd fc73 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	d904      	bls.n	8002b08 <HAL_TIM_Encoder_Init+0x1c8>
 8002afe:	f640 213c 	movw	r1, #2620	; 0xa3c
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002b04:	f7fd fc6a 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d904      	bls.n	8002b1a <HAL_TIM_Encoder_Init+0x1da>
 8002b10:	f640 213d 	movw	r1, #2621	; 0xa3d
 8002b14:	4808      	ldr	r0, [pc, #32]	; (8002b38 <HAL_TIM_Encoder_Init+0x1f8>)
 8002b16:	f7fd fc61 	bl	80003dc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d110      	bne.n	8002b48 <HAL_TIM_Encoder_Init+0x208>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd fdb0 	bl	8000694 <HAL_TIM_Encoder_MspInit>
 8002b34:	e008      	b.n	8002b48 <HAL_TIM_Encoder_Init+0x208>
 8002b36:	bf00      	nop
 8002b38:	08005e28 	.word	0x08005e28
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b5e:	f023 0307 	bic.w	r3, r3, #7
 8002b62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fa10 	bl	8002f94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	f023 0303 	bic.w	r3, r3, #3
 8002ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	4313      	orrs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002bba:	f023 030c 	bic.w	r3, r3, #12
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	031b      	lsls	r3, r3, #12
 8002bea:	4313      	orrs	r3, r2
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bf8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	4313      	orrs	r3, r2
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop

08002c38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <HAL_TIM_Encoder_Start_IT+0xe0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <HAL_TIM_Encoder_Start_IT+0x3c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d00e      	beq.n	8002c74 <HAL_TIM_Encoder_Start_IT+0x3c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a30      	ldr	r2, [pc, #192]	; (8002d1c <HAL_TIM_Encoder_Start_IT+0xe4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_TIM_Encoder_Start_IT+0x3c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_TIM_Encoder_Start_IT+0xe8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIM_Encoder_Start_IT+0x3c>
 8002c6a:	f44f 6133 	mov.w	r1, #2864	; 0xb30
 8002c6e:	482d      	ldr	r0, [pc, #180]	; (8002d24 <HAL_TIM_Encoder_Start_IT+0xec>)
 8002c70:	f7fd fbb4 	bl	80003dc <assert_failed>

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_TIM_Encoder_Start_IT+0x48>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d010      	beq.n	8002ca0 <HAL_TIM_Encoder_Start_IT+0x68>
 8002c7e:	e01f      	b.n	8002cc0 <HAL_TIM_Encoder_Start_IT+0x88>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f9e5 	bl	8003058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0202 	orr.w	r2, r2, #2
 8002c9c:	60da      	str	r2, [r3, #12]
      break;
 8002c9e:	e02e      	b.n	8002cfe <HAL_TIM_Encoder_Start_IT+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f9d5 	bl	8003058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0204 	orr.w	r2, r2, #4
 8002cbc:	60da      	str	r2, [r3, #12]
      break;
 8002cbe:	e01e      	b.n	8002cfe <HAL_TIM_Encoder_Start_IT+0xc6>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f9c5 	bl	8003058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f9be 	bl	8003058 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0202 	orr.w	r2, r2, #2
 8002cea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0204 	orr.w	r2, r2, #4
 8002cfa:	60da      	str	r2, [r3, #12]
      break;
 8002cfc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	08005e28 	.word	0x08005e28

08002d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d122      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d11b      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0202 	mvn.w	r2, #2
 8002d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8f6 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8e9 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8f8 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d122      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0204 	mvn.w	r2, #4
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8cc 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8bf 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8ce 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0208 	mvn.w	r2, #8
 8002dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2204      	movs	r2, #4
 8002e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8a2 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f895 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f8a4 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d122      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d11b      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0210 	mvn.w	r2, #16
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2208      	movs	r2, #8
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f878 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f86b 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f87a 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0201 	mvn.w	r2, #1
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f846 	bl	8002f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9b3 	bl	800323e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f83e 	bl	8002f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0220 	mvn.w	r2, #32
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f97e 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a29      	ldr	r2, [pc, #164]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00b      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d007      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <TIM_Base_SetConfig+0xbc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a25      	ldr	r2, [pc, #148]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d108      	bne.n	8002fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <TIM_Base_SetConfig+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a18      	ldr	r2, [pc, #96]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d103      	bne.n	800303c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	615a      	str	r2, [r3, #20]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800

08003058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <TIM_CCxChannelCmd+0x98>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d010      	beq.n	800308e <TIM_CCxChannelCmd+0x36>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d00c      	beq.n	800308e <TIM_CCxChannelCmd+0x36>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <TIM_CCxChannelCmd+0x9c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d008      	beq.n	800308e <TIM_CCxChannelCmd+0x36>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <TIM_CCxChannelCmd+0xa0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <TIM_CCxChannelCmd+0x36>
 8003084:	f641 11c9 	movw	r1, #6601	; 0x19c9
 8003088:	481c      	ldr	r0, [pc, #112]	; (80030fc <TIM_CCxChannelCmd+0xa4>)
 800308a:	f7fd f9a7 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <TIM_CCxChannelCmd+0x5e>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00d      	beq.n	80030b6 <TIM_CCxChannelCmd+0x5e>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d00a      	beq.n	80030b6 <TIM_CCxChannelCmd+0x5e>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d007      	beq.n	80030b6 <TIM_CCxChannelCmd+0x5e>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b3c      	cmp	r3, #60	; 0x3c
 80030aa:	d004      	beq.n	80030b6 <TIM_CCxChannelCmd+0x5e>
 80030ac:	f641 11ca 	movw	r1, #6602	; 0x19ca
 80030b0:	4812      	ldr	r0, [pc, #72]	; (80030fc <TIM_CCxChannelCmd+0xa4>)
 80030b2:	f7fd f993 	bl	80003dc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2201      	movs	r2, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	401a      	ands	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	08005e28 	.word	0x08005e28

08003100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a43      	ldr	r2, [pc, #268]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d013      	beq.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d00e      	beq.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003132:	f240 6164 	movw	r1, #1636	; 0x664
 8003136:	483c      	ldr	r0, [pc, #240]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003138:	f7fd f950 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d01c      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b20      	cmp	r3, #32
 8003152:	d018      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d014      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d010      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b50      	cmp	r3, #80	; 0x50
 800316a:	d00c      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d008      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b70      	cmp	r3, #112	; 0x70
 800317a:	d004      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800317c:	f240 6165 	movw	r1, #1637	; 0x665
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003182:	f7fd f92b 	bl	80003dc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d008      	beq.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003196:	f240 6166 	movw	r1, #1638	; 0x666
 800319a:	4823      	ldr	r0, [pc, #140]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800319c:	f7fd f91e 	bl	80003dc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e032      	b.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	08005e60 	.word	0x08005e60

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003250:	b490      	push	{r4, r7}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d819      	bhi.n	80032b2 <USB_ActivateEndpoint+0x62>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <USB_ActivateEndpoint+0x34>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a9 	.word	0x080032a9
 800328c:	080032b9 	.word	0x080032b9
 8003290:	0800329f 	.word	0x0800329f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003294:	89bb      	ldrh	r3, [r7, #12]
 8003296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329a:	81bb      	strh	r3, [r7, #12]
      break;
 800329c:	e00d      	b.n	80032ba <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800329e:	89bb      	ldrh	r3, [r7, #12]
 80032a0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80032a4:	81bb      	strh	r3, [r7, #12]
      break;
 80032a6:	e008      	b.n	80032ba <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80032a8:	89bb      	ldrh	r3, [r7, #12]
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	81bb      	strh	r3, [r7, #12]
      break;
 80032b0:	e003      	b.n	80032ba <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      break;
 80032b6:	e000      	b.n	80032ba <USB_ActivateEndpoint+0x6a>
      break;
 80032b8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	89bb      	ldrh	r3, [r7, #12]
 80032c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b29c      	uxth	r4, r3
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	4b8a      	ldr	r3, [pc, #552]	; (8003530 <USB_ActivateEndpoint+0x2e0>)
 8003308:	4323      	orrs	r3, r4
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	7b1b      	ldrb	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8112 	bne.w	800353c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d067      	beq.n	80033f0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003320:	687c      	ldr	r4, [r7, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	441c      	add	r4, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	4423      	add	r3, r4
 8003334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003338:	461c      	mov	r4, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	88db      	ldrh	r3, [r3, #6]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29c      	uxth	r4, r3
 8003356:	4623      	mov	r3, r4
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d014      	beq.n	800338a <USB_ActivateEndpoint+0x13a>
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	b29c      	uxth	r4, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <USB_ActivateEndpoint+0x2e4>)
 8003384:	4323      	orrs	r3, r4
 8003386:	b29b      	uxth	r3, r3
 8003388:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	78db      	ldrb	r3, [r3, #3]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d018      	beq.n	80033c4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	b29c      	uxth	r4, r3
 80033aa:	f084 0320 	eor.w	r3, r4, #32
 80033ae:	b29c      	uxth	r4, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <USB_ActivateEndpoint+0x2e0>)
 80033bc:	4323      	orrs	r3, r4
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
 80033c2:	e22b      	b.n	800381c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033da:	b29c      	uxth	r4, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	4b52      	ldr	r3, [pc, #328]	; (8003530 <USB_ActivateEndpoint+0x2e0>)
 80033e8:	4323      	orrs	r3, r4
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
 80033ee:	e215      	b.n	800381c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033f0:	687c      	ldr	r4, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	441c      	add	r4, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4423      	add	r3, r4
 8003404:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003408:	461c      	mov	r4, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	88db      	ldrh	r3, [r3, #6]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003418:	687c      	ldr	r4, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	441c      	add	r4, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	4423      	add	r3, r4
 800342c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003430:	461c      	mov	r4, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <USB_ActivateEndpoint+0x208>
 800343a:	8823      	ldrh	r3, [r4, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003442:	b29b      	uxth	r3, r3
 8003444:	8023      	strh	r3, [r4, #0]
 8003446:	8823      	ldrh	r3, [r4, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003452:	b29b      	uxth	r3, r3
 8003454:	8023      	strh	r3, [r4, #0]
 8003456:	e02d      	b.n	80034b4 <USB_ActivateEndpoint+0x264>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b3e      	cmp	r3, #62	; 0x3e
 800345e:	d812      	bhi.n	8003486 <USB_ActivateEndpoint+0x236>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <USB_ActivateEndpoint+0x22a>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	b29b      	uxth	r3, r3
 800347e:	029b      	lsls	r3, r3, #10
 8003480:	b29b      	uxth	r3, r3
 8003482:	8023      	strh	r3, [r4, #0]
 8003484:	e016      	b.n	80034b4 <USB_ActivateEndpoint+0x264>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <USB_ActivateEndpoint+0x250>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3b01      	subs	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	029b      	lsls	r3, r3, #10
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29c      	uxth	r4, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d014      	beq.n	80034f6 <USB_ActivateEndpoint+0x2a6>
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	b29c      	uxth	r4, r3
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <USB_ActivateEndpoint+0x2e8>)
 80034f0:	4323      	orrs	r3, r4
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	b29c      	uxth	r4, r3
 800350e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003512:	b29c      	uxth	r4, r3
 8003514:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003518:	b29c      	uxth	r4, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <USB_ActivateEndpoint+0x2e0>)
 8003526:	4323      	orrs	r3, r4
 8003528:	b29b      	uxth	r3, r3
 800352a:	8013      	strh	r3, [r2, #0]
 800352c:	e176      	b.n	800381c <USB_ActivateEndpoint+0x5cc>
 800352e:	bf00      	nop
 8003530:	ffff8080 	.word	0xffff8080
 8003534:	ffff80c0 	.word	0xffff80c0
 8003538:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	b29c      	uxth	r4, r3
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	4b96      	ldr	r3, [pc, #600]	; (80037b8 <USB_ActivateEndpoint+0x568>)
 8003560:	4323      	orrs	r3, r4
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003566:	687c      	ldr	r4, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	441c      	add	r4, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4423      	add	r3, r4
 800357a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800357e:	461c      	mov	r4, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	891b      	ldrh	r3, [r3, #8]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	8023      	strh	r3, [r4, #0]
 800358e:	687c      	ldr	r4, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	441c      	add	r4, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4423      	add	r3, r4
 80035a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035a6:	461c      	mov	r4, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	895b      	ldrh	r3, [r3, #10]
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 8088 	bne.w	80036d0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29c      	uxth	r4, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <USB_ActivateEndpoint+0x3b2>
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	b29c      	uxth	r4, r3
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	4b70      	ldr	r3, [pc, #448]	; (80037bc <USB_ActivateEndpoint+0x56c>)
 80035fc:	4323      	orrs	r3, r4
 80035fe:	b29b      	uxth	r3, r3
 8003600:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29c      	uxth	r4, r3
 8003610:	4623      	mov	r3, r4
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d014      	beq.n	8003644 <USB_ActivateEndpoint+0x3f4>
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	b29c      	uxth	r4, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	441a      	add	r2, r3
 800363c:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <USB_ActivateEndpoint+0x570>)
 800363e:	4323      	orrs	r3, r4
 8003640:	b29b      	uxth	r3, r3
 8003642:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	b29c      	uxth	r4, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <USB_ActivateEndpoint+0x570>)
 8003668:	4323      	orrs	r3, r4
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003684:	b29c      	uxth	r4, r3
 8003686:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800368a:	b29c      	uxth	r4, r3
 800368c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003690:	b29c      	uxth	r4, r3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <USB_ActivateEndpoint+0x574>)
 800369e:	4323      	orrs	r3, r4
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	b29c      	uxth	r4, r3
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <USB_ActivateEndpoint+0x574>)
 80036c8:	4323      	orrs	r3, r4
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
 80036ce:	e0a5      	b.n	800381c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29c      	uxth	r4, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d014      	beq.n	8003712 <USB_ActivateEndpoint+0x4c2>
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	b29c      	uxth	r4, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <USB_ActivateEndpoint+0x56c>)
 800370c:	4323      	orrs	r3, r4
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29c      	uxth	r4, r3
 8003720:	4623      	mov	r3, r4
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <USB_ActivateEndpoint+0x504>
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003740:	b29c      	uxth	r4, r3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <USB_ActivateEndpoint+0x570>)
 800374e:	4323      	orrs	r3, r4
 8003750:	b29b      	uxth	r3, r3
 8003752:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	b29c      	uxth	r4, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <USB_ActivateEndpoint+0x56c>)
 8003778:	4323      	orrs	r3, r4
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d020      	beq.n	80037c8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379c:	b29c      	uxth	r4, r3
 800379e:	f084 0320 	eor.w	r3, r4, #32
 80037a2:	b29c      	uxth	r4, r3
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <USB_ActivateEndpoint+0x574>)
 80037b0:	4323      	orrs	r3, r4
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8013      	strh	r3, [r2, #0]
 80037b6:	e01c      	b.n	80037f2 <USB_ActivateEndpoint+0x5a2>
 80037b8:	ffff8180 	.word	0xffff8180
 80037bc:	ffffc080 	.word	0xffffc080
 80037c0:	ffff80c0 	.word	0xffff80c0
 80037c4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037de:	b29c      	uxth	r4, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <USB_ActivateEndpoint+0x5d8>)
 80037ec:	4323      	orrs	r3, r4
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	b29c      	uxth	r4, r3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <USB_ActivateEndpoint+0x5d8>)
 8003816:	4323      	orrs	r3, r4
 8003818:	b29b      	uxth	r3, r3
 800381a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bc90      	pop	{r4, r7}
 8003826:	4770      	bx	lr
 8003828:	ffff8080 	.word	0xffff8080

0800382c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b08d      	sub	sp, #52	; 0x34
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	2b01      	cmp	r3, #1
 800383c:	f040 8160 	bne.w	8003b00 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d909      	bls.n	8003860 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	1ad2      	subs	r2, r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e005      	b.n	800386c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7b1b      	ldrb	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d119      	bne.n	80038a8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6959      	ldr	r1, [r3, #20]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	88da      	ldrh	r2, [r3, #6]
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	b29b      	uxth	r3, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb8e 	bl	8003fa2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003886:	687c      	ldr	r4, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388e:	b29b      	uxth	r3, r3
 8003890:	441c      	add	r4, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4423      	add	r3, r4
 800389a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800389e:	461c      	mov	r4, r3
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8023      	strh	r3, [r4, #0]
 80038a6:	e10f      	b.n	8003ac8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d065      	beq.n	800398a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038be:	687c      	ldr	r4, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d148      	bne.n	800395a <USB_EPStartXfer+0x12e>
 80038c8:	687c      	ldr	r4, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	441c      	add	r4, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	4423      	add	r3, r4
 80038dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038e0:	461c      	mov	r4, r3
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10e      	bne.n	8003906 <USB_EPStartXfer+0xda>
 80038e8:	8823      	ldrh	r3, [r4, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8023      	strh	r3, [r4, #0]
 80038f4:	8823      	ldrh	r3, [r4, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003900:	b29b      	uxth	r3, r3
 8003902:	8023      	strh	r3, [r4, #0]
 8003904:	e03d      	b.n	8003982 <USB_EPStartXfer+0x156>
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	2b3e      	cmp	r3, #62	; 0x3e
 800390a:	d810      	bhi.n	800392e <USB_EPStartXfer+0x102>
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <USB_EPStartXfer+0xf6>
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	3301      	adds	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	b29b      	uxth	r3, r3
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	b29b      	uxth	r3, r3
 800392a:	8023      	strh	r3, [r4, #0]
 800392c:	e029      	b.n	8003982 <USB_EPStartXfer+0x156>
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <USB_EPStartXfer+0x118>
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	3b01      	subs	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	b29b      	uxth	r3, r3
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	b29b      	uxth	r3, r3
 800394c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003954:	b29b      	uxth	r3, r3
 8003956:	8023      	strh	r3, [r4, #0]
 8003958:	e013      	b.n	8003982 <USB_EPStartXfer+0x156>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10f      	bne.n	8003982 <USB_EPStartXfer+0x156>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003968:	b29b      	uxth	r3, r3
 800396a:	441c      	add	r4, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	4423      	add	r3, r4
 8003974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	895b      	ldrh	r3, [r3, #10]
 8003986:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003988:	e063      	b.n	8003a52 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d148      	bne.n	8003a24 <USB_EPStartXfer+0x1f8>
 8003992:	687c      	ldr	r4, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399a:	b29b      	uxth	r3, r3
 800399c:	441c      	add	r4, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4423      	add	r3, r4
 80039a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039aa:	461c      	mov	r4, r3
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <USB_EPStartXfer+0x1a4>
 80039b2:	8823      	ldrh	r3, [r4, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	8023      	strh	r3, [r4, #0]
 80039be:	8823      	ldrh	r3, [r4, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8023      	strh	r3, [r4, #0]
 80039ce:	e03d      	b.n	8003a4c <USB_EPStartXfer+0x220>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	2b3e      	cmp	r3, #62	; 0x3e
 80039d4:	d810      	bhi.n	80039f8 <USB_EPStartXfer+0x1cc>
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <USB_EPStartXfer+0x1c0>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	3301      	adds	r3, #1
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	029b      	lsls	r3, r3, #10
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	8023      	strh	r3, [r4, #0]
 80039f6:	e029      	b.n	8003a4c <USB_EPStartXfer+0x220>
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <USB_EPStartXfer+0x1e2>
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	029b      	lsls	r3, r3, #10
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8023      	strh	r3, [r4, #0]
 8003a22:	e013      	b.n	8003a4c <USB_EPStartXfer+0x220>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10f      	bne.n	8003a4c <USB_EPStartXfer+0x220>
 8003a2c:	687c      	ldr	r4, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	441c      	add	r4, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	4423      	add	r3, r4
 8003a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a44:	461c      	mov	r4, r3
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	891b      	ldrh	r3, [r3, #8]
 8003a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6959      	ldr	r1, [r3, #20]
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 faa0 	bl	8003fa2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <USB_EPStartXfer+0x26a>
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	b29c      	uxth	r4, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	441a      	add	r2, r3
 8003a8c:	4b9a      	ldr	r3, [pc, #616]	; (8003cf8 <USB_EPStartXfer+0x4cc>)
 8003a8e:	4323      	orrs	r3, r4
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	8013      	strh	r3, [r2, #0]
 8003a94:	e018      	b.n	8003ac8 <USB_EPStartXfer+0x29c>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d114      	bne.n	8003ac8 <USB_EPStartXfer+0x29c>
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	b29c      	uxth	r4, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	4b8e      	ldr	r3, [pc, #568]	; (8003cfc <USB_EPStartXfer+0x4d0>)
 8003ac2:	4323      	orrs	r3, r4
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ade:	b29c      	uxth	r4, r3
 8003ae0:	f084 0310 	eor.w	r3, r4, #16
 8003ae4:	b29c      	uxth	r4, r3
 8003ae6:	f084 0320 	eor.w	r3, r4, #32
 8003aea:	b29c      	uxth	r4, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <USB_EPStartXfer+0x4d4>)
 8003af8:	4323      	orrs	r3, r4
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8013      	strh	r3, [r2, #0]
 8003afe:	e146      	b.n	8003d8e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d909      	bls.n	8003b20 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e005      	b.n	8003b2c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	7b1b      	ldrb	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d148      	bne.n	8003bc6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b34:	687c      	ldr	r4, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	441c      	add	r4, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4423      	add	r3, r4
 8003b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b4c:	461c      	mov	r4, r3
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10e      	bne.n	8003b72 <USB_EPStartXfer+0x346>
 8003b54:	8823      	ldrh	r3, [r4, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	8023      	strh	r3, [r4, #0]
 8003b60:	8823      	ldrh	r3, [r4, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	8023      	strh	r3, [r4, #0]
 8003b70:	e0f2      	b.n	8003d58 <USB_EPStartXfer+0x52c>
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	2b3e      	cmp	r3, #62	; 0x3e
 8003b76:	d810      	bhi.n	8003b9a <USB_EPStartXfer+0x36e>
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <USB_EPStartXfer+0x362>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	029b      	lsls	r3, r3, #10
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8023      	strh	r3, [r4, #0]
 8003b98:	e0de      	b.n	8003d58 <USB_EPStartXfer+0x52c>
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <USB_EPStartXfer+0x384>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	8023      	strh	r3, [r4, #0]
 8003bc4:	e0c8      	b.n	8003d58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d148      	bne.n	8003c60 <USB_EPStartXfer+0x434>
 8003bce:	687c      	ldr	r4, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	441c      	add	r4, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4423      	add	r3, r4
 8003be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003be6:	461c      	mov	r4, r3
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10e      	bne.n	8003c0c <USB_EPStartXfer+0x3e0>
 8003bee:	8823      	ldrh	r3, [r4, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8023      	strh	r3, [r4, #0]
 8003bfa:	8823      	ldrh	r3, [r4, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8023      	strh	r3, [r4, #0]
 8003c0a:	e03d      	b.n	8003c88 <USB_EPStartXfer+0x45c>
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c10:	d810      	bhi.n	8003c34 <USB_EPStartXfer+0x408>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <USB_EPStartXfer+0x3fc>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8023      	strh	r3, [r4, #0]
 8003c32:	e029      	b.n	8003c88 <USB_EPStartXfer+0x45c>
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <USB_EPStartXfer+0x41e>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8023      	strh	r3, [r4, #0]
 8003c5e:	e013      	b.n	8003c88 <USB_EPStartXfer+0x45c>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10f      	bne.n	8003c88 <USB_EPStartXfer+0x45c>
 8003c68:	687c      	ldr	r4, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	441c      	add	r4, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4423      	add	r3, r4
 8003c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c80:	461c      	mov	r4, r3
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8023      	strh	r3, [r4, #0]
 8003c88:	687c      	ldr	r4, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d14e      	bne.n	8003d30 <USB_EPStartXfer+0x504>
 8003c92:	687c      	ldr	r4, [r7, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	441c      	add	r4, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	4423      	add	r3, r4
 8003ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003caa:	461c      	mov	r4, r3
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10e      	bne.n	8003cd0 <USB_EPStartXfer+0x4a4>
 8003cb2:	8823      	ldrh	r3, [r4, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8023      	strh	r3, [r4, #0]
 8003cbe:	8823      	ldrh	r3, [r4, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	8023      	strh	r3, [r4, #0]
 8003cce:	e043      	b.n	8003d58 <USB_EPStartXfer+0x52c>
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003cd4:	d816      	bhi.n	8003d04 <USB_EPStartXfer+0x4d8>
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <USB_EPStartXfer+0x4c0>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8023      	strh	r3, [r4, #0]
 8003cf6:	e02f      	b.n	8003d58 <USB_EPStartXfer+0x52c>
 8003cf8:	ffff80c0 	.word	0xffff80c0
 8003cfc:	ffffc080 	.word	0xffffc080
 8003d00:	ffff8080 	.word	0xffff8080
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <USB_EPStartXfer+0x4ee>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	029b      	lsls	r3, r3, #10
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8023      	strh	r3, [r4, #0]
 8003d2e:	e013      	b.n	8003d58 <USB_EPStartXfer+0x52c>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10f      	bne.n	8003d58 <USB_EPStartXfer+0x52c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	441c      	add	r4, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	4423      	add	r3, r4
 8003d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	b29c      	uxth	r4, r3
 8003d70:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d74:	b29c      	uxth	r4, r3
 8003d76:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d7a:	b29c      	uxth	r4, r3
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <USB_EPStartXfer+0x56c>)
 8003d88:	4323      	orrs	r3, r4
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3734      	adds	r7, #52	; 0x34
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	ffff8080 	.word	0xffff8080

08003d9c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d9c:	b490      	push	{r4, r7}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	b29c      	uxth	r4, r3
 8003dc6:	f084 0310 	eor.w	r3, r4, #16
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <USB_EPSetStall+0x80>)
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]
 8003dde:	e017      	b.n	8003e10 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	b29c      	uxth	r4, r3
 8003df8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dfc:	b29c      	uxth	r4, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <USB_EPSetStall+0x80>)
 8003e0a:	4323      	orrs	r3, r4
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc90      	pop	{r4, r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	ffff8080 	.word	0xffff8080

08003e20 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e20:	b490      	push	{r4, r7}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7b1b      	ldrb	r3, [r3, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d17d      	bne.n	8003f2e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03d      	beq.n	8003eb6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29c      	uxth	r4, r3
 8003e48:	4623      	mov	r3, r4
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <USB_EPClearStall+0x5c>
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	b29c      	uxth	r4, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <USB_EPClearStall+0x11c>)
 8003e76:	4323      	orrs	r3, r4
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	78db      	ldrb	r3, [r3, #3]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d054      	beq.n	8003f2e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9a:	b29c      	uxth	r4, r3
 8003e9c:	f084 0320 	eor.w	r3, r4, #32
 8003ea0:	b29c      	uxth	r4, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	441a      	add	r2, r3
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <USB_EPClearStall+0x120>)
 8003eae:	4323      	orrs	r3, r4
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	8013      	strh	r3, [r2, #0]
 8003eb4:	e03b      	b.n	8003f2e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29c      	uxth	r4, r3
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d014      	beq.n	8003ef8 <USB_EPClearStall+0xd8>
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	b29c      	uxth	r4, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <USB_EPClearStall+0x124>)
 8003ef2:	4323      	orrs	r3, r4
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	b29c      	uxth	r4, r3
 8003f10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003f14:	b29c      	uxth	r4, r3
 8003f16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003f1a:	b29c      	uxth	r4, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	441a      	add	r2, r3
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <USB_EPClearStall+0x120>)
 8003f28:	4323      	orrs	r3, r4
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc90      	pop	{r4, r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	ffff80c0 	.word	0xffff80c0
 8003f40:	ffff8080 	.word	0xffff8080
 8003f44:	ffffc080 	.word	0xffffc080

08003f48 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b08d      	sub	sp, #52	; 0x34
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	4611      	mov	r1, r2
 8003fae:	461a      	mov	r2, r3
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	80fb      	strh	r3, [r7, #6]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fb8:	88bb      	ldrh	r3, [r7, #4]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	005a      	lsls	r2, r3, #1
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	e01e      	b.n	800401a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	3302      	adds	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	3302      	adds	r3, #2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	3b01      	subs	r3, #1
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1dd      	bne.n	8003fdc <USB_WritePMA+0x3a>
  }
}
 8004020:	bf00      	nop
 8004022:	3734      	adds	r7, #52	; 0x34
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800402a:	b480      	push	{r7}
 800402c:	b08b      	sub	sp, #44	; 0x2c
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	4611      	mov	r1, r2
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	80fb      	strh	r3, [r7, #6]
 800403c:	4613      	mov	r3, r2
 800403e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004040:	88bb      	ldrh	r3, [r7, #4]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	005a      	lsls	r2, r3, #1
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800405c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	e01b      	b.n	800409c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	3302      	adds	r3, #2
 8004070:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3301      	adds	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b2da      	uxtb	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	3302      	adds	r3, #2
 8004094:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	3b01      	subs	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e0      	bne.n	8004064 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	701a      	strb	r2, [r3, #0]
  }
}
 80040be:	bf00      	nop
 80040c0:	372c      	adds	r7, #44	; 0x2c
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80040e8:	2302      	movs	r3, #2
 80040ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	4611      	mov	r1, r2
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	4611      	mov	r1, r2
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3

  return USBD_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 feca 	bl	8004eec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2b01      	cmp	r3, #1
 800417a:	d00c      	beq.n	8004196 <USBD_LL_SetupStage+0x56>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d302      	bcc.n	8004186 <USBD_LL_SetupStage+0x46>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d010      	beq.n	80041a6 <USBD_LL_SetupStage+0x66>
 8004184:	e017      	b.n	80041b6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9ca 	bl	8004528 <USBD_StdDevReq>
      break;
 8004194:	e01a      	b.n	80041cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa2c 	bl	80045fc <USBD_StdItfReq>
      break;
 80041a4:	e012      	b.n	80041cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa6a 	bl	8004688 <USBD_StdEPReq>
      break;
 80041b4:	e00a      	b.n	80041cc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 ffff 	bl	80051c8 <USBD_LL_StallEP>
      break;
 80041ca:	bf00      	nop
  }

  return USBD_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	460b      	mov	r3, r1
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d14b      	bne.n	8004282 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80041f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d134      	bne.n	8004266 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d919      	bls.n	800423c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	1ad2      	subs	r2, r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800421e:	429a      	cmp	r2, r3
 8004220:	d203      	bcs.n	800422a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004226:	b29b      	uxth	r3, r3
 8004228:	e002      	b.n	8004230 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fed4 	bl	8004fe2 <USBD_CtlContinueRx>
 800423a:	e038      	b.n	80042ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800424e:	2b03      	cmp	r3, #3
 8004250:	d105      	bne.n	800425e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fed1 	bl	8005006 <USBD_CtlSendStatus>
 8004264:	e023      	b.n	80042ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800426c:	2b05      	cmp	r3, #5
 800426e:	d11e      	bne.n	80042ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004278:	2100      	movs	r1, #0
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 ffa4 	bl	80051c8 <USBD_LL_StallEP>
 8004280:	e015      	b.n	80042ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004294:	2b03      	cmp	r3, #3
 8004296:	d108      	bne.n	80042aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	7afa      	ldrb	r2, [r7, #11]
 80042a2:	4611      	mov	r1, r2
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	4798      	blx	r3
 80042a8:	e001      	b.n	80042ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e000      	b.n	80042b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	460b      	mov	r3, r1
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d17f      	bne.n	80043cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3314      	adds	r3, #20
 80042d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d15c      	bne.n	8004396 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d915      	bls.n	8004314 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fe5c 	bl	8004fbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004306:	2300      	movs	r3, #0
 8004308:	2200      	movs	r2, #0
 800430a:	2100      	movs	r1, #0
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f001 f800 	bl	8005312 <USBD_LL_PrepareReceive>
 8004312:	e04e      	b.n	80043b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	6912      	ldr	r2, [r2, #16]
 800431c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004320:	fb02 f201 	mul.w	r2, r2, r1
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11c      	bne.n	8004364 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004332:	429a      	cmp	r2, r3
 8004334:	d316      	bcc.n	8004364 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004340:	429a      	cmp	r2, r3
 8004342:	d20f      	bcs.n	8004364 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004344:	2200      	movs	r2, #0
 8004346:	2100      	movs	r1, #0
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fe38 	bl	8004fbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004356:	2300      	movs	r3, #0
 8004358:	2200      	movs	r2, #0
 800435a:	2100      	movs	r1, #0
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 ffd8 	bl	8005312 <USBD_LL_PrepareReceive>
 8004362:	e026      	b.n	80043b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004376:	2b03      	cmp	r3, #3
 8004378:	d105      	bne.n	8004386 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 ff1d 	bl	80051c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fe4c 	bl	800502c <USBD_CtlReceiveStatus>
 8004394:	e00d      	b.n	80043b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800439c:	2b04      	cmp	r3, #4
 800439e:	d004      	beq.n	80043aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80043aa:	2180      	movs	r1, #128	; 0x80
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 ff0b 	bl	80051c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d11d      	bne.n	80043f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff fe83 	bl	80040c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80043ca:	e015      	b.n	80043f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d108      	bne.n	80043f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	7afa      	ldrb	r2, [r7, #11]
 80043ec:	4611      	mov	r1, r2
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	4798      	blx	r3
 80043f2:	e001      	b.n	80043f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80043f4:	2302      	movs	r3, #2
 80043f6:	e000      	b.n	80043fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 feb3 	bl	800517c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2240      	movs	r2, #64	; 0x40
 8004422:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004426:	2340      	movs	r3, #64	; 0x40
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fea5 	bl	800517c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2240      	movs	r2, #64	; 0x40
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6852      	ldr	r2, [r2, #4]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	4611      	mov	r1, r2
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
  }

  return USBD_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2204      	movs	r2, #4
 80044ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d105      	bne.n	80044e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004502:	2b03      	cmp	r3, #3
 8004504:	d10b      	bne.n	800451e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800453e:	2b20      	cmp	r3, #32
 8004540:	d004      	beq.n	800454c <USBD_StdDevReq+0x24>
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d002      	beq.n	800454c <USBD_StdDevReq+0x24>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <USBD_StdDevReq+0x34>
 800454a:	e04c      	b.n	80045e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
      break;
 800455a:	e049      	b.n	80045f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	2b09      	cmp	r3, #9
 8004562:	d83a      	bhi.n	80045da <USBD_StdDevReq+0xb2>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <USBD_StdDevReq+0x44>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045bd 	.word	0x080045bd
 8004570:	080045d1 	.word	0x080045d1
 8004574:	080045db 	.word	0x080045db
 8004578:	080045c7 	.word	0x080045c7
 800457c:	080045db 	.word	0x080045db
 8004580:	0800459f 	.word	0x0800459f
 8004584:	08004595 	.word	0x08004595
 8004588:	080045db 	.word	0x080045db
 800458c:	080045b3 	.word	0x080045b3
 8004590:	080045a9 	.word	0x080045a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9d4 	bl	8004944 <USBD_GetDescriptor>
          break;
 800459c:	e022      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb37 	bl	8004c14 <USBD_SetAddress>
          break;
 80045a6:	e01d      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fb74 	bl	8004c98 <USBD_SetConfig>
          break;
 80045b0:	e018      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fbfd 	bl	8004db4 <USBD_GetConfig>
          break;
 80045ba:	e013      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fc2c 	bl	8004e1c <USBD_GetStatus>
          break;
 80045c4:	e00e      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fc5a 	bl	8004e82 <USBD_SetFeature>
          break;
 80045ce:	e009      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fc69 	bl	8004eaa <USBD_ClrFeature>
          break;
 80045d8:	e004      	b.n	80045e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fcc1 	bl	8004f64 <USBD_CtlError>
          break;
 80045e2:	bf00      	nop
      }
      break;
 80045e4:	e004      	b.n	80045f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80045e6:	6839      	ldr	r1, [r7, #0]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fcbb 	bl	8004f64 <USBD_CtlError>
      break;
 80045ee:	bf00      	nop
  }

  return ret;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop

080045fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004612:	2b20      	cmp	r3, #32
 8004614:	d003      	beq.n	800461e <USBD_StdItfReq+0x22>
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d001      	beq.n	800461e <USBD_StdItfReq+0x22>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12a      	bne.n	8004674 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004624:	3b01      	subs	r3, #1
 8004626:	2b02      	cmp	r3, #2
 8004628:	d81d      	bhi.n	8004666 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	889b      	ldrh	r3, [r3, #4]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d813      	bhi.n	800465c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	4603      	mov	r3, r0
 8004644:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	88db      	ldrh	r3, [r3, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d110      	bne.n	8004670 <USBD_StdItfReq+0x74>
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10d      	bne.n	8004670 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fcd6 	bl	8005006 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800465a:	e009      	b.n	8004670 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fc80 	bl	8004f64 <USBD_CtlError>
          break;
 8004664:	e004      	b.n	8004670 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fc7b 	bl	8004f64 <USBD_CtlError>
          break;
 800466e:	e000      	b.n	8004672 <USBD_StdItfReq+0x76>
          break;
 8004670:	bf00      	nop
      }
      break;
 8004672:	e004      	b.n	800467e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fc74 	bl	8004f64 <USBD_CtlError>
      break;
 800467c:	bf00      	nop
  }

  return USBD_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d004      	beq.n	80046b2 <USBD_StdEPReq+0x2a>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d002      	beq.n	80046b2 <USBD_StdEPReq+0x2a>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <USBD_StdEPReq+0x3a>
 80046b0:	e13d      	b.n	800492e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
      break;
 80046c0:	e13a      	b.n	8004938 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d10a      	bne.n	80046e4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]

        return ret;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	e12a      	b.n	800493a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d03e      	beq.n	800476a <USBD_StdEPReq+0xe2>
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d002      	beq.n	80046f6 <USBD_StdEPReq+0x6e>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d070      	beq.n	80047d6 <USBD_StdEPReq+0x14e>
 80046f4:	e115      	b.n	8004922 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d002      	beq.n	8004706 <USBD_StdEPReq+0x7e>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d015      	beq.n	8004730 <USBD_StdEPReq+0xa8>
 8004704:	e02b      	b.n	800475e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <USBD_StdEPReq+0x9e>
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d009      	beq.n	8004726 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fd56 	bl	80051c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fd52 	bl	80051c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004724:	e020      	b.n	8004768 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fc1b 	bl	8004f64 <USBD_CtlError>
              break;
 800472e:	e01b      	b.n	8004768 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	885b      	ldrh	r3, [r3, #2]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10e      	bne.n	8004756 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <USBD_StdEPReq+0xce>
 800473e:	7bbb      	ldrb	r3, [r7, #14]
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d008      	beq.n	8004756 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	88db      	ldrh	r3, [r3, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fd39 	bl	80051c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fc55 	bl	8005006 <USBD_CtlSendStatus>

              break;
 800475c:	e004      	b.n	8004768 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800475e:	6839      	ldr	r1, [r7, #0]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fbff 	bl	8004f64 <USBD_CtlError>
              break;
 8004766:	bf00      	nop
          }
          break;
 8004768:	e0e0      	b.n	800492c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004770:	2b02      	cmp	r3, #2
 8004772:	d002      	beq.n	800477a <USBD_StdEPReq+0xf2>
 8004774:	2b03      	cmp	r3, #3
 8004776:	d015      	beq.n	80047a4 <USBD_StdEPReq+0x11c>
 8004778:	e026      	b.n	80047c8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800477a:	7bbb      	ldrb	r3, [r7, #14]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <USBD_StdEPReq+0x112>
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d009      	beq.n	800479a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fd1c 	bl	80051c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fd18 	bl	80051c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004798:	e01c      	b.n	80047d4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fbe1 	bl	8004f64 <USBD_CtlError>
              break;
 80047a2:	e017      	b.n	80047d4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	885b      	ldrh	r3, [r3, #2]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d112      	bne.n	80047d2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd23 	bl	8005206 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fc20 	bl	8005006 <USBD_CtlSendStatus>
              }
              break;
 80047c6:	e004      	b.n	80047d2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fbca 	bl	8004f64 <USBD_CtlError>
              break;
 80047d0:	e000      	b.n	80047d4 <USBD_StdEPReq+0x14c>
              break;
 80047d2:	bf00      	nop
          }
          break;
 80047d4:	e0aa      	b.n	800492c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d002      	beq.n	80047e6 <USBD_StdEPReq+0x15e>
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d032      	beq.n	800484a <USBD_StdEPReq+0x1c2>
 80047e4:	e097      	b.n	8004916 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80047e6:	7bbb      	ldrb	r3, [r7, #14]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <USBD_StdEPReq+0x174>
 80047ec:	7bbb      	ldrb	r3, [r7, #14]
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d004      	beq.n	80047fc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fbb5 	bl	8004f64 <USBD_CtlError>
                break;
 80047fa:	e091      	b.n	8004920 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80047fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da0b      	bge.n	800481c <USBD_StdEPReq+0x194>
 8004804:	7bbb      	ldrb	r3, [r7, #14]
 8004806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3310      	adds	r3, #16
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	e00b      	b.n	8004834 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2202      	movs	r2, #2
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb9f 	bl	8004f86 <USBD_CtlSendData>
              break;
 8004848:	e06a      	b.n	8004920 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800484a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da11      	bge.n	8004876 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004852:	7bbb      	ldrb	r3, [r7, #14]
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3318      	adds	r3, #24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d117      	bne.n	800489c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fb78 	bl	8004f64 <USBD_CtlError>
                  break;
 8004874:	e054      	b.n	8004920 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004876:	7bbb      	ldrb	r3, [r7, #14]
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb65 	bl	8004f64 <USBD_CtlError>
                  break;
 800489a:	e041      	b.n	8004920 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800489c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da0b      	bge.n	80048bc <USBD_StdEPReq+0x234>
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	3310      	adds	r3, #16
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	3304      	adds	r3, #4
 80048ba:	e00b      	b.n	80048d4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	3304      	adds	r3, #4
 80048d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <USBD_StdEPReq+0x25a>
 80048dc:	7bbb      	ldrb	r3, [r7, #14]
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d103      	bne.n	80048ea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e00e      	b.n	8004908 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80048ea:	7bbb      	ldrb	r3, [r7, #14]
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fca8 	bl	8005244 <USBD_LL_IsStallEP>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e002      	b.n	8004908 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2202      	movs	r2, #2
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb39 	bl	8004f86 <USBD_CtlSendData>
              break;
 8004914:	e004      	b.n	8004920 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb23 	bl	8004f64 <USBD_CtlError>
              break;
 800491e:	bf00      	nop
          }
          break;
 8004920:	e004      	b.n	800492c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fb1d 	bl	8004f64 <USBD_CtlError>
          break;
 800492a:	bf00      	nop
      }
      break;
 800492c:	e004      	b.n	8004938 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb17 	bl	8004f64 <USBD_CtlError>
      break;
 8004936:	bf00      	nop
  }

  return ret;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	885b      	ldrh	r3, [r3, #2]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	2b06      	cmp	r3, #6
 8004966:	f200 8128 	bhi.w	8004bba <USBD_GetDescriptor+0x276>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <USBD_GetDescriptor+0x2c>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	0800498d 	.word	0x0800498d
 8004974:	080049a5 	.word	0x080049a5
 8004978:	080049e5 	.word	0x080049e5
 800497c:	08004bbb 	.word	0x08004bbb
 8004980:	08004bbb 	.word	0x08004bbb
 8004984:	08004b5b 	.word	0x08004b5b
 8004988:	08004b87 	.word	0x08004b87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	7c12      	ldrb	r2, [r2, #16]
 8004998:	f107 0108 	add.w	r1, r7, #8
 800499c:	4610      	mov	r0, r2
 800499e:	4798      	blx	r3
 80049a0:	60f8      	str	r0, [r7, #12]
      break;
 80049a2:	e112      	b.n	8004bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7c1b      	ldrb	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f107 0208 	add.w	r2, r7, #8
 80049b8:	4610      	mov	r0, r2
 80049ba:	4798      	blx	r3
 80049bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3301      	adds	r3, #1
 80049c2:	2202      	movs	r2, #2
 80049c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80049c6:	e100      	b.n	8004bca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f107 0208 	add.w	r2, r7, #8
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
 80049d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	2202      	movs	r2, #2
 80049e0:	701a      	strb	r2, [r3, #0]
      break;
 80049e2:	e0f2      	b.n	8004bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	885b      	ldrh	r3, [r3, #2]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	f200 80ac 	bhi.w	8004b48 <USBD_GetDescriptor+0x204>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <USBD_GetDescriptor+0xb4>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a11 	.word	0x08004a11
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a79 	.word	0x08004a79
 8004a04:	08004aad 	.word	0x08004aad
 8004a08:	08004ae1 	.word	0x08004ae1
 8004a0c:	08004b15 	.word	0x08004b15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	7c12      	ldrb	r2, [r2, #16]
 8004a28:	f107 0108 	add.w	r1, r7, #8
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4798      	blx	r3
 8004a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004a32:	e091      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa94 	bl	8004f64 <USBD_CtlError>
            err++;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	72fb      	strb	r3, [r7, #11]
          break;
 8004a42:	e089      	b.n	8004b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	7c12      	ldrb	r2, [r2, #16]
 8004a5c:	f107 0108 	add.w	r1, r7, #8
 8004a60:	4610      	mov	r0, r2
 8004a62:	4798      	blx	r3
 8004a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004a66:	e077      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa7a 	bl	8004f64 <USBD_CtlError>
            err++;
 8004a70:	7afb      	ldrb	r3, [r7, #11]
 8004a72:	3301      	adds	r3, #1
 8004a74:	72fb      	strb	r3, [r7, #11]
          break;
 8004a76:	e06f      	b.n	8004b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	7c12      	ldrb	r2, [r2, #16]
 8004a90:	f107 0108 	add.w	r1, r7, #8
 8004a94:	4610      	mov	r0, r2
 8004a96:	4798      	blx	r3
 8004a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004a9a:	e05d      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa60 	bl	8004f64 <USBD_CtlError>
            err++;
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8004aaa:	e055      	b.n	8004b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	7c12      	ldrb	r2, [r2, #16]
 8004ac4:	f107 0108 	add.w	r1, r7, #8
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ace:	e043      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa46 	bl	8004f64 <USBD_CtlError>
            err++;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	3301      	adds	r3, #1
 8004adc:	72fb      	strb	r3, [r7, #11]
          break;
 8004ade:	e03b      	b.n	8004b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	7c12      	ldrb	r2, [r2, #16]
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b02:	e029      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa2c 	bl	8004f64 <USBD_CtlError>
            err++;
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	72fb      	strb	r3, [r7, #11]
          break;
 8004b12:	e021      	b.n	8004b58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	7c12      	ldrb	r2, [r2, #16]
 8004b2c:	f107 0108 	add.w	r1, r7, #8
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
 8004b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b36:	e00f      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa12 	bl	8004f64 <USBD_CtlError>
            err++;
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	3301      	adds	r3, #1
 8004b44:	72fb      	strb	r3, [r7, #11]
          break;
 8004b46:	e007      	b.n	8004b58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa0a 	bl	8004f64 <USBD_CtlError>
          err++;
 8004b50:	7afb      	ldrb	r3, [r7, #11]
 8004b52:	3301      	adds	r3, #1
 8004b54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004b56:	e038      	b.n	8004bca <USBD_GetDescriptor+0x286>
 8004b58:	e037      	b.n	8004bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7c1b      	ldrb	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	f107 0208 	add.w	r2, r7, #8
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4798      	blx	r3
 8004b72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004b74:	e029      	b.n	8004bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9f3 	bl	8004f64 <USBD_CtlError>
        err++;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	3301      	adds	r3, #1
 8004b82:	72fb      	strb	r3, [r7, #11]
      break;
 8004b84:	e021      	b.n	8004bca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7c1b      	ldrb	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f107 0208 	add.w	r2, r7, #8
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4798      	blx	r3
 8004b9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ba8:	e00f      	b.n	8004bca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9d9 	bl	8004f64 <USBD_CtlError>
        err++;
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8004bb8:	e007      	b.n	8004bca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004bba:	6839      	ldr	r1, [r7, #0]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9d1 	bl	8004f64 <USBD_CtlError>
      err++;
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8004bc8:	bf00      	nop
  }

  if (err != 0U)
 8004bca:	7afb      	ldrb	r3, [r7, #11]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11c      	bne.n	8004c0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d011      	beq.n	8004bfa <USBD_GetDescriptor+0x2b6>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	88db      	ldrh	r3, [r3, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	88da      	ldrh	r2, [r3, #6]
 8004be2:	893b      	ldrh	r3, [r7, #8]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf28      	it	cs
 8004be8:	4613      	movcs	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004bee:	893b      	ldrh	r3, [r7, #8]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f9c6 	bl	8004f86 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	88db      	ldrh	r3, [r3, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9ff 	bl	8005006 <USBD_CtlSendStatus>
 8004c08:	e000      	b.n	8004c0c <USBD_GetDescriptor+0x2c8>
    return;
 8004c0a:	bf00      	nop
    }
  }
}
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	889b      	ldrh	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d130      	bne.n	8004c88 <USBD_SetAddress+0x74>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	88db      	ldrh	r3, [r3, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d12c      	bne.n	8004c88 <USBD_SetAddress+0x74>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	885b      	ldrh	r3, [r3, #2]
 8004c32:	2b7f      	cmp	r3, #127	; 0x7f
 8004c34:	d828      	bhi.n	8004c88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	885b      	ldrh	r3, [r3, #2]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d104      	bne.n	8004c56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f988 	bl	8004f64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c54:	e01c      	b.n	8004c90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb13 	bl	800528e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f9cc 	bl	8005006 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c7c:	e008      	b.n	8004c90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c86:	e003      	b.n	8004c90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f96a 	bl	8004f64 <USBD_CtlError>
  }
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	885b      	ldrh	r3, [r3, #2]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <USBD_SetConfig+0x118>)
 8004caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004cac:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <USBD_SetConfig+0x118>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d904      	bls.n	8004cbe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f954 	bl	8004f64 <USBD_CtlError>
 8004cbc:	e075      	b.n	8004daa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d002      	beq.n	8004cce <USBD_SetConfig+0x36>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d023      	beq.n	8004d14 <USBD_SetConfig+0x7c>
 8004ccc:	e062      	b.n	8004d94 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004cce:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <USBD_SetConfig+0x118>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01a      	beq.n	8004d0c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <USBD_SetConfig+0x118>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ce8:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <USBD_SetConfig+0x118>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff f9f4 	bl	80040dc <USBD_SetClassConfig>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d104      	bne.n	8004d04 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f931 	bl	8004f64 <USBD_CtlError>
            return;
 8004d02:	e052      	b.n	8004daa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f97e 	bl	8005006 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004d0a:	e04e      	b.n	8004daa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f97a 	bl	8005006 <USBD_CtlSendStatus>
        break;
 8004d12:	e04a      	b.n	8004daa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d112      	bne.n	8004d42 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004d24:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff f9f0 	bl	800411a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f963 	bl	8005006 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004d40:	e033      	b.n	8004daa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d01d      	beq.n	8004d8c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff f9de 	bl	800411a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f9b4 	bl	80040dc <USBD_SetClassConfig>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d104      	bne.n	8004d84 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8f1 	bl	8004f64 <USBD_CtlError>
            return;
 8004d82:	e012      	b.n	8004daa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f93e 	bl	8005006 <USBD_CtlSendStatus>
        break;
 8004d8a:	e00e      	b.n	8004daa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f93a 	bl	8005006 <USBD_CtlSendStatus>
        break;
 8004d92:	e00a      	b.n	8004daa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8e4 	bl	8004f64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <USBD_SetConfig+0x118>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff f9b9 	bl	800411a <USBD_ClrClassConfig>
        break;
 8004da8:	bf00      	nop
    }
  }
}
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000090 	.word	0x20000090

08004db4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	88db      	ldrh	r3, [r3, #6]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d004      	beq.n	8004dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8cb 	bl	8004f64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004dce:	e021      	b.n	8004e14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	db17      	blt.n	8004e0a <USBD_GetConfig+0x56>
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	dd02      	ble.n	8004de4 <USBD_GetConfig+0x30>
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d00b      	beq.n	8004dfa <USBD_GetConfig+0x46>
 8004de2:	e012      	b.n	8004e0a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3308      	adds	r3, #8
 8004dee:	2201      	movs	r2, #1
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8c7 	bl	8004f86 <USBD_CtlSendData>
        break;
 8004df8:	e00c      	b.n	8004e14 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8bf 	bl	8004f86 <USBD_CtlSendData>
        break;
 8004e08:	e004      	b.n	8004e14 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f8a9 	bl	8004f64 <USBD_CtlError>
        break;
 8004e12:	bf00      	nop
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d81e      	bhi.n	8004e70 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d004      	beq.n	8004e44 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f891 	bl	8004f64 <USBD_CtlError>
        break;
 8004e42:	e01a      	b.n	8004e7a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f043 0202 	orr.w	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	330c      	adds	r3, #12
 8004e64:	2202      	movs	r2, #2
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f88c 	bl	8004f86 <USBD_CtlSendData>
      break;
 8004e6e:	e004      	b.n	8004e7a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f876 	bl	8004f64 <USBD_CtlError>
      break;
 8004e78:	bf00      	nop
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	885b      	ldrh	r3, [r3, #2]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d106      	bne.n	8004ea2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8b2 	bl	8005006 <USBD_CtlSendStatus>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d80b      	bhi.n	8004ed8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	885b      	ldrh	r3, [r3, #2]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10c      	bne.n	8004ee2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f898 	bl	8005006 <USBD_CtlSendStatus>
      }
      break;
 8004ed6:	e004      	b.n	8004ee2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f842 	bl	8004f64 <USBD_CtlError>
      break;
 8004ee0:	e000      	b.n	8004ee4 <USBD_ClrFeature+0x3a>
      break;
 8004ee2:	bf00      	nop
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785a      	ldrb	r2, [r3, #1]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3303      	adds	r3, #3
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3304      	adds	r3, #4
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	3305      	adds	r3, #5
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	3306      	adds	r3, #6
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	3307      	adds	r3, #7
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	80da      	strh	r2, [r3, #6]

}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004f6e:	2180      	movs	r1, #128	; 0x80
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f929 	bl	80051c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004f76:	2100      	movs	r1, #0
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f925 	bl	80051c8 <USBD_LL_StallEP>
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	4613      	mov	r3, r2
 8004f92:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004f9c:	88fa      	ldrh	r2, [r7, #6]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	2100      	movs	r1, #0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f98c 	bl	80052cc <USBD_LL_Transmit>

  return USBD_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f97a 	bl	80052cc <USBD_LL_Transmit>

  return USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f98b 	bl	8005312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005016:	2300      	movs	r3, #0
 8005018:	2200      	movs	r2, #0
 800501a:	2100      	movs	r1, #0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f955 	bl	80052cc <USBD_LL_Transmit>

  return USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2205      	movs	r2, #5
 8005038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f965 	bl	8005312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7ff f869 	bl	8004140 <USBD_LL_SetupStage>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	015b      	lsls	r3, r3, #5
 800508e:	4413      	add	r3, r2
 8005090:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	4619      	mov	r1, r3
 800509a:	f7ff f89c 	bl	80041d6 <USBD_LL_DataOutStage>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	015b      	lsls	r3, r3, #5
 80050be:	4413      	add	r3, r2
 80050c0:	333c      	adds	r3, #60	; 0x3c
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	4619      	mov	r1, r3
 80050c8:	f7ff f8f6 	bl	80042b8 <USBD_LL_DataInStage>
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fa06 	bl	80044f4 <USBD_LL_SOF>
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d001      	beq.n	8005108 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005104:	f7fb f964 	bl	80003d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f9b6 	bl	8004484 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff f96f 	bl	8004402 <USBD_LL_Reset>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff f9b1 	bl	80044a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <HAL_PCD_SuspendCallback+0x30>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	4a03      	ldr	r2, [pc, #12]	; (800515c <HAL_PCD_SuspendCallback+0x30>)
 800514e:	f043 0306 	orr.w	r3, r3, #6
 8005152:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff f9ab 	bl	80044ca <USBD_LL_Resume>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	4603      	mov	r3, r0
 800518c:	70fb      	strb	r3, [r7, #3]
 800518e:	460b      	mov	r3, r1
 8005190:	70bb      	strb	r3, [r7, #2]
 8005192:	4613      	mov	r3, r2
 8005194:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80051a4:	78bb      	ldrb	r3, [r7, #2]
 80051a6:	883a      	ldrh	r2, [r7, #0]
 80051a8:	78f9      	ldrb	r1, [r7, #3]
 80051aa:	f7fc f929 	bl	8001400 <HAL_PCD_EP_Open>
 80051ae:	4603      	mov	r3, r0
 80051b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f8cf 	bl	8005358 <USBD_Get_USB_Status>
 80051ba:	4603      	mov	r3, r0
 80051bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80051be:	7bbb      	ldrb	r3, [r7, #14]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc f9dd 	bl	80015a6 <HAL_PCD_EP_SetStall>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f8b0 	bl	8005358 <USBD_Get_USB_Status>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80051fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fc fa18 	bl	800165a <HAL_PCD_EP_ClrStall>
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f891 	bl	8005358 <USBD_Get_USB_Status>
 8005236:	4603      	mov	r3, r0
 8005238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800523a:	7bbb      	ldrb	r3, [r7, #14]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005256:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800525c:	2b00      	cmp	r3, #0
 800525e:	da08      	bge.n	8005272 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	015b      	lsls	r3, r3, #5
 800526a:	4413      	add	r3, r2
 800526c:	332a      	adds	r3, #42	; 0x2a
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	e008      	b.n	8005284 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	015b      	lsls	r3, r3, #5
 800527c:	4413      	add	r3, r2
 800527e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005282:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fc f882 	bl	80013b6 <HAL_PCD_SetAddress>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f84d 	bl	8005358 <USBD_Get_USB_Status>
 80052be:	4603      	mov	r3, r0
 80052c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	461a      	mov	r2, r3
 80052d8:	460b      	mov	r3, r1
 80052da:	72fb      	strb	r3, [r7, #11]
 80052dc:	4613      	mov	r3, r2
 80052de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	7af9      	ldrb	r1, [r7, #11]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	f7fc f91e 	bl	8001534 <HAL_PCD_EP_Transmit>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f82a 	bl	8005358 <USBD_Get_USB_Status>
 8005304:	4603      	mov	r3, r0
 8005306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005308:	7dbb      	ldrb	r3, [r7, #22]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	461a      	mov	r2, r3
 800531e:	460b      	mov	r3, r1
 8005320:	72fb      	strb	r3, [r7, #11]
 8005322:	4613      	mov	r3, r2
 8005324:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	7af9      	ldrb	r1, [r7, #11]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	f7fc f8c1 	bl	80014c0 <HAL_PCD_EP_Receive>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f807 	bl	8005358 <USBD_Get_USB_Status>
 800534a:	4603      	mov	r3, r0
 800534c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800534e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d817      	bhi.n	800539c <USBD_Get_USB_Status+0x44>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <USBD_Get_USB_Status+0x1c>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005385 	.word	0x08005385
 8005378:	0800538b 	.word	0x0800538b
 800537c:	08005391 	.word	0x08005391
 8005380:	08005397 	.word	0x08005397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]
    break;
 8005388:	e00b      	b.n	80053a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800538a:	2302      	movs	r3, #2
 800538c:	73fb      	strb	r3, [r7, #15]
    break;
 800538e:	e008      	b.n	80053a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
    break;
 8005394:	e005      	b.n	80053a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005396:	2302      	movs	r3, #2
 8005398:	73fb      	strb	r3, [r7, #15]
    break;
 800539a:	e002      	b.n	80053a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800539c:	2302      	movs	r3, #2
 800539e:	73fb      	strb	r3, [r7, #15]
    break;
 80053a0:	bf00      	nop
  }
  return usb_status;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	2500      	movs	r5, #0
 80053c0:	4e0c      	ldr	r6, [pc, #48]	; (80053f4 <__libc_init_array+0x38>)
 80053c2:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c4:	1ba4      	subs	r4, r4, r6
 80053c6:	10a4      	asrs	r4, r4, #2
 80053c8:	42a5      	cmp	r5, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	f000 fc34 	bl	8005c38 <_init>
 80053d0:	2500      	movs	r5, #0
 80053d2:	4e0a      	ldr	r6, [pc, #40]	; (80053fc <__libc_init_array+0x40>)
 80053d4:	4c0a      	ldr	r4, [pc, #40]	; (8005400 <__libc_init_array+0x44>)
 80053d6:	1ba4      	subs	r4, r4, r6
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	42a5      	cmp	r5, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053e4:	4798      	blx	r3
 80053e6:	3501      	adds	r5, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ee:	4798      	blx	r3
 80053f0:	3501      	adds	r5, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	08005f40 	.word	0x08005f40
 80053f8:	08005f40 	.word	0x08005f40
 80053fc:	08005f40 	.word	0x08005f40
 8005400:	08005f44 	.word	0x08005f44

08005404 <memset>:
 8005404:	4603      	mov	r3, r0
 8005406:	4402      	add	r2, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <siprintf>:
 8005414:	b40e      	push	{r1, r2, r3}
 8005416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800541a:	b500      	push	{lr}
 800541c:	b09c      	sub	sp, #112	; 0x70
 800541e:	ab1d      	add	r3, sp, #116	; 0x74
 8005420:	9002      	str	r0, [sp, #8]
 8005422:	9006      	str	r0, [sp, #24]
 8005424:	9107      	str	r1, [sp, #28]
 8005426:	9104      	str	r1, [sp, #16]
 8005428:	4808      	ldr	r0, [pc, #32]	; (800544c <siprintf+0x38>)
 800542a:	4909      	ldr	r1, [pc, #36]	; (8005450 <siprintf+0x3c>)
 800542c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005430:	9105      	str	r1, [sp, #20]
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	a902      	add	r1, sp, #8
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	f000 f8c0 	bl	80055bc <_svfiprintf_r>
 800543c:	2200      	movs	r2, #0
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	b01c      	add	sp, #112	; 0x70
 8005444:	f85d eb04 	ldr.w	lr, [sp], #4
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c
 8005450:	ffff0208 	.word	0xffff0208

08005454 <_malloc_r>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	1ccd      	adds	r5, r1, #3
 8005458:	f025 0503 	bic.w	r5, r5, #3
 800545c:	3508      	adds	r5, #8
 800545e:	2d0c      	cmp	r5, #12
 8005460:	bf38      	it	cc
 8005462:	250c      	movcc	r5, #12
 8005464:	2d00      	cmp	r5, #0
 8005466:	4606      	mov	r6, r0
 8005468:	db01      	blt.n	800546e <_malloc_r+0x1a>
 800546a:	42a9      	cmp	r1, r5
 800546c:	d903      	bls.n	8005476 <_malloc_r+0x22>
 800546e:	230c      	movs	r3, #12
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	2000      	movs	r0, #0
 8005474:	bd70      	pop	{r4, r5, r6, pc}
 8005476:	f000 fb63 	bl	8005b40 <__malloc_lock>
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <_malloc_r+0xac>)
 800547c:	6814      	ldr	r4, [r2, #0]
 800547e:	4621      	mov	r1, r4
 8005480:	b991      	cbnz	r1, 80054a8 <_malloc_r+0x54>
 8005482:	4c20      	ldr	r4, [pc, #128]	; (8005504 <_malloc_r+0xb0>)
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	b91b      	cbnz	r3, 8005490 <_malloc_r+0x3c>
 8005488:	4630      	mov	r0, r6
 800548a:	f000 fb17 	bl	8005abc <_sbrk_r>
 800548e:	6020      	str	r0, [r4, #0]
 8005490:	4629      	mov	r1, r5
 8005492:	4630      	mov	r0, r6
 8005494:	f000 fb12 	bl	8005abc <_sbrk_r>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d124      	bne.n	80054e6 <_malloc_r+0x92>
 800549c:	230c      	movs	r3, #12
 800549e:	4630      	mov	r0, r6
 80054a0:	6033      	str	r3, [r6, #0]
 80054a2:	f000 fb4e 	bl	8005b42 <__malloc_unlock>
 80054a6:	e7e4      	b.n	8005472 <_malloc_r+0x1e>
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	1b5b      	subs	r3, r3, r5
 80054ac:	d418      	bmi.n	80054e0 <_malloc_r+0x8c>
 80054ae:	2b0b      	cmp	r3, #11
 80054b0:	d90f      	bls.n	80054d2 <_malloc_r+0x7e>
 80054b2:	600b      	str	r3, [r1, #0]
 80054b4:	18cc      	adds	r4, r1, r3
 80054b6:	50cd      	str	r5, [r1, r3]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 fb42 	bl	8005b42 <__malloc_unlock>
 80054be:	f104 000b 	add.w	r0, r4, #11
 80054c2:	1d23      	adds	r3, r4, #4
 80054c4:	f020 0007 	bic.w	r0, r0, #7
 80054c8:	1ac3      	subs	r3, r0, r3
 80054ca:	d0d3      	beq.n	8005474 <_malloc_r+0x20>
 80054cc:	425a      	negs	r2, r3
 80054ce:	50e2      	str	r2, [r4, r3]
 80054d0:	e7d0      	b.n	8005474 <_malloc_r+0x20>
 80054d2:	684b      	ldr	r3, [r1, #4]
 80054d4:	428c      	cmp	r4, r1
 80054d6:	bf16      	itet	ne
 80054d8:	6063      	strne	r3, [r4, #4]
 80054da:	6013      	streq	r3, [r2, #0]
 80054dc:	460c      	movne	r4, r1
 80054de:	e7eb      	b.n	80054b8 <_malloc_r+0x64>
 80054e0:	460c      	mov	r4, r1
 80054e2:	6849      	ldr	r1, [r1, #4]
 80054e4:	e7cc      	b.n	8005480 <_malloc_r+0x2c>
 80054e6:	1cc4      	adds	r4, r0, #3
 80054e8:	f024 0403 	bic.w	r4, r4, #3
 80054ec:	42a0      	cmp	r0, r4
 80054ee:	d005      	beq.n	80054fc <_malloc_r+0xa8>
 80054f0:	1a21      	subs	r1, r4, r0
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 fae2 	bl	8005abc <_sbrk_r>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d0cf      	beq.n	800549c <_malloc_r+0x48>
 80054fc:	6025      	str	r5, [r4, #0]
 80054fe:	e7db      	b.n	80054b8 <_malloc_r+0x64>
 8005500:	20000094 	.word	0x20000094
 8005504:	20000098 	.word	0x20000098

08005508 <__ssputs_r>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	688e      	ldr	r6, [r1, #8]
 800550e:	4682      	mov	sl, r0
 8005510:	429e      	cmp	r6, r3
 8005512:	460c      	mov	r4, r1
 8005514:	4690      	mov	r8, r2
 8005516:	4699      	mov	r9, r3
 8005518:	d837      	bhi.n	800558a <__ssputs_r+0x82>
 800551a:	898a      	ldrh	r2, [r1, #12]
 800551c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005520:	d031      	beq.n	8005586 <__ssputs_r+0x7e>
 8005522:	2302      	movs	r3, #2
 8005524:	6825      	ldr	r5, [r4, #0]
 8005526:	6909      	ldr	r1, [r1, #16]
 8005528:	1a6f      	subs	r7, r5, r1
 800552a:	6965      	ldr	r5, [r4, #20]
 800552c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005530:	fb95 f5f3 	sdiv	r5, r5, r3
 8005534:	f109 0301 	add.w	r3, r9, #1
 8005538:	443b      	add	r3, r7
 800553a:	429d      	cmp	r5, r3
 800553c:	bf38      	it	cc
 800553e:	461d      	movcc	r5, r3
 8005540:	0553      	lsls	r3, r2, #21
 8005542:	d530      	bpl.n	80055a6 <__ssputs_r+0x9e>
 8005544:	4629      	mov	r1, r5
 8005546:	f7ff ff85 	bl	8005454 <_malloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	b950      	cbnz	r0, 8005564 <__ssputs_r+0x5c>
 800554e:	230c      	movs	r3, #12
 8005550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005554:	f8ca 3000 	str.w	r3, [sl]
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	463a      	mov	r2, r7
 8005566:	6921      	ldr	r1, [r4, #16]
 8005568:	f000 fac6 	bl	8005af8 <memcpy>
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	6126      	str	r6, [r4, #16]
 800557a:	443e      	add	r6, r7
 800557c:	6026      	str	r6, [r4, #0]
 800557e:	464e      	mov	r6, r9
 8005580:	6165      	str	r5, [r4, #20]
 8005582:	1bed      	subs	r5, r5, r7
 8005584:	60a5      	str	r5, [r4, #8]
 8005586:	454e      	cmp	r6, r9
 8005588:	d900      	bls.n	800558c <__ssputs_r+0x84>
 800558a:	464e      	mov	r6, r9
 800558c:	4632      	mov	r2, r6
 800558e:	4641      	mov	r1, r8
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	f000 fabc 	bl	8005b0e <memmove>
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	2000      	movs	r0, #0
 800559a:	1b9b      	subs	r3, r3, r6
 800559c:	60a3      	str	r3, [r4, #8]
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	441e      	add	r6, r3
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	e7dc      	b.n	8005560 <__ssputs_r+0x58>
 80055a6:	462a      	mov	r2, r5
 80055a8:	f000 fb18 	bl	8005bdc <_realloc_r>
 80055ac:	4606      	mov	r6, r0
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d1e2      	bne.n	8005578 <__ssputs_r+0x70>
 80055b2:	6921      	ldr	r1, [r4, #16]
 80055b4:	4650      	mov	r0, sl
 80055b6:	f000 fac5 	bl	8005b44 <_free_r>
 80055ba:	e7c8      	b.n	800554e <__ssputs_r+0x46>

080055bc <_svfiprintf_r>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	461d      	mov	r5, r3
 80055c2:	898b      	ldrh	r3, [r1, #12]
 80055c4:	b09d      	sub	sp, #116	; 0x74
 80055c6:	061f      	lsls	r7, r3, #24
 80055c8:	4680      	mov	r8, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4616      	mov	r6, r2
 80055ce:	d50f      	bpl.n	80055f0 <_svfiprintf_r+0x34>
 80055d0:	690b      	ldr	r3, [r1, #16]
 80055d2:	b96b      	cbnz	r3, 80055f0 <_svfiprintf_r+0x34>
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	f7ff ff3d 	bl	8005454 <_malloc_r>
 80055da:	6020      	str	r0, [r4, #0]
 80055dc:	6120      	str	r0, [r4, #16]
 80055de:	b928      	cbnz	r0, 80055ec <_svfiprintf_r+0x30>
 80055e0:	230c      	movs	r3, #12
 80055e2:	f8c8 3000 	str.w	r3, [r8]
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ea:	e0c8      	b.n	800577e <_svfiprintf_r+0x1c2>
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	6163      	str	r3, [r4, #20]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9309      	str	r3, [sp, #36]	; 0x24
 80055f4:	2320      	movs	r3, #32
 80055f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055fa:	2330      	movs	r3, #48	; 0x30
 80055fc:	f04f 0b01 	mov.w	fp, #1
 8005600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005604:	9503      	str	r5, [sp, #12]
 8005606:	4637      	mov	r7, r6
 8005608:	463d      	mov	r5, r7
 800560a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800560e:	b10b      	cbz	r3, 8005614 <_svfiprintf_r+0x58>
 8005610:	2b25      	cmp	r3, #37	; 0x25
 8005612:	d13e      	bne.n	8005692 <_svfiprintf_r+0xd6>
 8005614:	ebb7 0a06 	subs.w	sl, r7, r6
 8005618:	d00b      	beq.n	8005632 <_svfiprintf_r+0x76>
 800561a:	4653      	mov	r3, sl
 800561c:	4632      	mov	r2, r6
 800561e:	4621      	mov	r1, r4
 8005620:	4640      	mov	r0, r8
 8005622:	f7ff ff71 	bl	8005508 <__ssputs_r>
 8005626:	3001      	adds	r0, #1
 8005628:	f000 80a4 	beq.w	8005774 <_svfiprintf_r+0x1b8>
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	4453      	add	r3, sl
 8005630:	9309      	str	r3, [sp, #36]	; 0x24
 8005632:	783b      	ldrb	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 809d 	beq.w	8005774 <_svfiprintf_r+0x1b8>
 800563a:	2300      	movs	r3, #0
 800563c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800564c:	931a      	str	r3, [sp, #104]	; 0x68
 800564e:	462f      	mov	r7, r5
 8005650:	2205      	movs	r2, #5
 8005652:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005656:	4850      	ldr	r0, [pc, #320]	; (8005798 <_svfiprintf_r+0x1dc>)
 8005658:	f000 fa40 	bl	8005adc <memchr>
 800565c:	9b04      	ldr	r3, [sp, #16]
 800565e:	b9d0      	cbnz	r0, 8005696 <_svfiprintf_r+0xda>
 8005660:	06d9      	lsls	r1, r3, #27
 8005662:	bf44      	itt	mi
 8005664:	2220      	movmi	r2, #32
 8005666:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800566a:	071a      	lsls	r2, r3, #28
 800566c:	bf44      	itt	mi
 800566e:	222b      	movmi	r2, #43	; 0x2b
 8005670:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005674:	782a      	ldrb	r2, [r5, #0]
 8005676:	2a2a      	cmp	r2, #42	; 0x2a
 8005678:	d015      	beq.n	80056a6 <_svfiprintf_r+0xea>
 800567a:	462f      	mov	r7, r5
 800567c:	2000      	movs	r0, #0
 800567e:	250a      	movs	r5, #10
 8005680:	9a07      	ldr	r2, [sp, #28]
 8005682:	4639      	mov	r1, r7
 8005684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005688:	3b30      	subs	r3, #48	; 0x30
 800568a:	2b09      	cmp	r3, #9
 800568c:	d94d      	bls.n	800572a <_svfiprintf_r+0x16e>
 800568e:	b1b8      	cbz	r0, 80056c0 <_svfiprintf_r+0x104>
 8005690:	e00f      	b.n	80056b2 <_svfiprintf_r+0xf6>
 8005692:	462f      	mov	r7, r5
 8005694:	e7b8      	b.n	8005608 <_svfiprintf_r+0x4c>
 8005696:	4a40      	ldr	r2, [pc, #256]	; (8005798 <_svfiprintf_r+0x1dc>)
 8005698:	463d      	mov	r5, r7
 800569a:	1a80      	subs	r0, r0, r2
 800569c:	fa0b f000 	lsl.w	r0, fp, r0
 80056a0:	4318      	orrs	r0, r3
 80056a2:	9004      	str	r0, [sp, #16]
 80056a4:	e7d3      	b.n	800564e <_svfiprintf_r+0x92>
 80056a6:	9a03      	ldr	r2, [sp, #12]
 80056a8:	1d11      	adds	r1, r2, #4
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	9103      	str	r1, [sp, #12]
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	db01      	blt.n	80056b6 <_svfiprintf_r+0xfa>
 80056b2:	9207      	str	r2, [sp, #28]
 80056b4:	e004      	b.n	80056c0 <_svfiprintf_r+0x104>
 80056b6:	4252      	negs	r2, r2
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	9207      	str	r2, [sp, #28]
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	783b      	ldrb	r3, [r7, #0]
 80056c2:	2b2e      	cmp	r3, #46	; 0x2e
 80056c4:	d10c      	bne.n	80056e0 <_svfiprintf_r+0x124>
 80056c6:	787b      	ldrb	r3, [r7, #1]
 80056c8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ca:	d133      	bne.n	8005734 <_svfiprintf_r+0x178>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	3702      	adds	r7, #2
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	9203      	str	r2, [sp, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfb8      	it	lt
 80056da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056de:	9305      	str	r3, [sp, #20]
 80056e0:	4d2e      	ldr	r5, [pc, #184]	; (800579c <_svfiprintf_r+0x1e0>)
 80056e2:	2203      	movs	r2, #3
 80056e4:	7839      	ldrb	r1, [r7, #0]
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f9f8 	bl	8005adc <memchr>
 80056ec:	b138      	cbz	r0, 80056fe <_svfiprintf_r+0x142>
 80056ee:	2340      	movs	r3, #64	; 0x40
 80056f0:	1b40      	subs	r0, r0, r5
 80056f2:	fa03 f000 	lsl.w	r0, r3, r0
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	3701      	adds	r7, #1
 80056fa:	4303      	orrs	r3, r0
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	7839      	ldrb	r1, [r7, #0]
 8005700:	2206      	movs	r2, #6
 8005702:	4827      	ldr	r0, [pc, #156]	; (80057a0 <_svfiprintf_r+0x1e4>)
 8005704:	1c7e      	adds	r6, r7, #1
 8005706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800570a:	f000 f9e7 	bl	8005adc <memchr>
 800570e:	2800      	cmp	r0, #0
 8005710:	d038      	beq.n	8005784 <_svfiprintf_r+0x1c8>
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <_svfiprintf_r+0x1e8>)
 8005714:	bb13      	cbnz	r3, 800575c <_svfiprintf_r+0x1a0>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	3307      	adds	r3, #7
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	3308      	adds	r3, #8
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	444b      	add	r3, r9
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	e76d      	b.n	8005606 <_svfiprintf_r+0x4a>
 800572a:	fb05 3202 	mla	r2, r5, r2, r3
 800572e:	2001      	movs	r0, #1
 8005730:	460f      	mov	r7, r1
 8005732:	e7a6      	b.n	8005682 <_svfiprintf_r+0xc6>
 8005734:	2300      	movs	r3, #0
 8005736:	250a      	movs	r5, #10
 8005738:	4619      	mov	r1, r3
 800573a:	3701      	adds	r7, #1
 800573c:	9305      	str	r3, [sp, #20]
 800573e:	4638      	mov	r0, r7
 8005740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005744:	3a30      	subs	r2, #48	; 0x30
 8005746:	2a09      	cmp	r2, #9
 8005748:	d903      	bls.n	8005752 <_svfiprintf_r+0x196>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0c8      	beq.n	80056e0 <_svfiprintf_r+0x124>
 800574e:	9105      	str	r1, [sp, #20]
 8005750:	e7c6      	b.n	80056e0 <_svfiprintf_r+0x124>
 8005752:	fb05 2101 	mla	r1, r5, r1, r2
 8005756:	2301      	movs	r3, #1
 8005758:	4607      	mov	r7, r0
 800575a:	e7f0      	b.n	800573e <_svfiprintf_r+0x182>
 800575c:	ab03      	add	r3, sp, #12
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4622      	mov	r2, r4
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <_svfiprintf_r+0x1ec>)
 8005764:	a904      	add	r1, sp, #16
 8005766:	4640      	mov	r0, r8
 8005768:	f3af 8000 	nop.w
 800576c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005770:	4681      	mov	r9, r0
 8005772:	d1d6      	bne.n	8005722 <_svfiprintf_r+0x166>
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	065b      	lsls	r3, r3, #25
 8005778:	f53f af35 	bmi.w	80055e6 <_svfiprintf_r+0x2a>
 800577c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577e:	b01d      	add	sp, #116	; 0x74
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005784:	ab03      	add	r3, sp, #12
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	4622      	mov	r2, r4
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <_svfiprintf_r+0x1ec>)
 800578c:	a904      	add	r1, sp, #16
 800578e:	4640      	mov	r0, r8
 8005790:	f000 f882 	bl	8005898 <_printf_i>
 8005794:	e7ea      	b.n	800576c <_svfiprintf_r+0x1b0>
 8005796:	bf00      	nop
 8005798:	08005f0c 	.word	0x08005f0c
 800579c:	08005f12 	.word	0x08005f12
 80057a0:	08005f16 	.word	0x08005f16
 80057a4:	00000000 	.word	0x00000000
 80057a8:	08005509 	.word	0x08005509

080057ac <_printf_common>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	4691      	mov	r9, r2
 80057b2:	461f      	mov	r7, r3
 80057b4:	688a      	ldr	r2, [r1, #8]
 80057b6:	690b      	ldr	r3, [r1, #16]
 80057b8:	4606      	mov	r6, r0
 80057ba:	4293      	cmp	r3, r2
 80057bc:	bfb8      	it	lt
 80057be:	4613      	movlt	r3, r2
 80057c0:	f8c9 3000 	str.w	r3, [r9]
 80057c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c8:	460c      	mov	r4, r1
 80057ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057ce:	b112      	cbz	r2, 80057d6 <_printf_common+0x2a>
 80057d0:	3301      	adds	r3, #1
 80057d2:	f8c9 3000 	str.w	r3, [r9]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	0699      	lsls	r1, r3, #26
 80057da:	bf42      	ittt	mi
 80057dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057e0:	3302      	addmi	r3, #2
 80057e2:	f8c9 3000 	strmi.w	r3, [r9]
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	f015 0506 	ands.w	r5, r5, #6
 80057ec:	d107      	bne.n	80057fe <_printf_common+0x52>
 80057ee:	f104 0a19 	add.w	sl, r4, #25
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	f8d9 2000 	ldr.w	r2, [r9]
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dc29      	bgt.n	8005852 <_printf_common+0xa6>
 80057fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	3300      	adds	r3, #0
 8005806:	bf18      	it	ne
 8005808:	2301      	movne	r3, #1
 800580a:	0692      	lsls	r2, r2, #26
 800580c:	d42e      	bmi.n	800586c <_printf_common+0xc0>
 800580e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005812:	4639      	mov	r1, r7
 8005814:	4630      	mov	r0, r6
 8005816:	47c0      	blx	r8
 8005818:	3001      	adds	r0, #1
 800581a:	d021      	beq.n	8005860 <_printf_common+0xb4>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	68e5      	ldr	r5, [r4, #12]
 8005820:	f003 0306 	and.w	r3, r3, #6
 8005824:	2b04      	cmp	r3, #4
 8005826:	bf18      	it	ne
 8005828:	2500      	movne	r5, #0
 800582a:	f8d9 2000 	ldr.w	r2, [r9]
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	bf08      	it	eq
 8005834:	1aad      	subeq	r5, r5, r2
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	bf08      	it	eq
 800583c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005840:	4293      	cmp	r3, r2
 8005842:	bfc4      	itt	gt
 8005844:	1a9b      	subgt	r3, r3, r2
 8005846:	18ed      	addgt	r5, r5, r3
 8005848:	341a      	adds	r4, #26
 800584a:	454d      	cmp	r5, r9
 800584c:	d11a      	bne.n	8005884 <_printf_common+0xd8>
 800584e:	2000      	movs	r0, #0
 8005850:	e008      	b.n	8005864 <_printf_common+0xb8>
 8005852:	2301      	movs	r3, #1
 8005854:	4652      	mov	r2, sl
 8005856:	4639      	mov	r1, r7
 8005858:	4630      	mov	r0, r6
 800585a:	47c0      	blx	r8
 800585c:	3001      	adds	r0, #1
 800585e:	d103      	bne.n	8005868 <_printf_common+0xbc>
 8005860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	3501      	adds	r5, #1
 800586a:	e7c2      	b.n	80057f2 <_printf_common+0x46>
 800586c:	2030      	movs	r0, #48	; 0x30
 800586e:	18e1      	adds	r1, r4, r3
 8005870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800587a:	4422      	add	r2, r4
 800587c:	3302      	adds	r3, #2
 800587e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005882:	e7c4      	b.n	800580e <_printf_common+0x62>
 8005884:	2301      	movs	r3, #1
 8005886:	4622      	mov	r2, r4
 8005888:	4639      	mov	r1, r7
 800588a:	4630      	mov	r0, r6
 800588c:	47c0      	blx	r8
 800588e:	3001      	adds	r0, #1
 8005890:	d0e6      	beq.n	8005860 <_printf_common+0xb4>
 8005892:	f109 0901 	add.w	r9, r9, #1
 8005896:	e7d8      	b.n	800584a <_printf_common+0x9e>

08005898 <_printf_i>:
 8005898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800589c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058a0:	460c      	mov	r4, r1
 80058a2:	7e09      	ldrb	r1, [r1, #24]
 80058a4:	b085      	sub	sp, #20
 80058a6:	296e      	cmp	r1, #110	; 0x6e
 80058a8:	4617      	mov	r7, r2
 80058aa:	4606      	mov	r6, r0
 80058ac:	4698      	mov	r8, r3
 80058ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b0:	f000 80b3 	beq.w	8005a1a <_printf_i+0x182>
 80058b4:	d822      	bhi.n	80058fc <_printf_i+0x64>
 80058b6:	2963      	cmp	r1, #99	; 0x63
 80058b8:	d036      	beq.n	8005928 <_printf_i+0x90>
 80058ba:	d80a      	bhi.n	80058d2 <_printf_i+0x3a>
 80058bc:	2900      	cmp	r1, #0
 80058be:	f000 80b9 	beq.w	8005a34 <_printf_i+0x19c>
 80058c2:	2958      	cmp	r1, #88	; 0x58
 80058c4:	f000 8083 	beq.w	80059ce <_printf_i+0x136>
 80058c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058d0:	e032      	b.n	8005938 <_printf_i+0xa0>
 80058d2:	2964      	cmp	r1, #100	; 0x64
 80058d4:	d001      	beq.n	80058da <_printf_i+0x42>
 80058d6:	2969      	cmp	r1, #105	; 0x69
 80058d8:	d1f6      	bne.n	80058c8 <_printf_i+0x30>
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	0605      	lsls	r5, r0, #24
 80058e0:	f103 0104 	add.w	r1, r3, #4
 80058e4:	d52a      	bpl.n	800593c <_printf_i+0xa4>
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6011      	str	r1, [r2, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da03      	bge.n	80058f6 <_printf_i+0x5e>
 80058ee:	222d      	movs	r2, #45	; 0x2d
 80058f0:	425b      	negs	r3, r3
 80058f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058f6:	486f      	ldr	r0, [pc, #444]	; (8005ab4 <_printf_i+0x21c>)
 80058f8:	220a      	movs	r2, #10
 80058fa:	e039      	b.n	8005970 <_printf_i+0xd8>
 80058fc:	2973      	cmp	r1, #115	; 0x73
 80058fe:	f000 809d 	beq.w	8005a3c <_printf_i+0x1a4>
 8005902:	d808      	bhi.n	8005916 <_printf_i+0x7e>
 8005904:	296f      	cmp	r1, #111	; 0x6f
 8005906:	d020      	beq.n	800594a <_printf_i+0xb2>
 8005908:	2970      	cmp	r1, #112	; 0x70
 800590a:	d1dd      	bne.n	80058c8 <_printf_i+0x30>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	f043 0320 	orr.w	r3, r3, #32
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	e003      	b.n	800591e <_printf_i+0x86>
 8005916:	2975      	cmp	r1, #117	; 0x75
 8005918:	d017      	beq.n	800594a <_printf_i+0xb2>
 800591a:	2978      	cmp	r1, #120	; 0x78
 800591c:	d1d4      	bne.n	80058c8 <_printf_i+0x30>
 800591e:	2378      	movs	r3, #120	; 0x78
 8005920:	4865      	ldr	r0, [pc, #404]	; (8005ab8 <_printf_i+0x220>)
 8005922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005926:	e055      	b.n	80059d4 <_printf_i+0x13c>
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800592e:	1d19      	adds	r1, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6011      	str	r1, [r2, #0]
 8005934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005938:	2301      	movs	r3, #1
 800593a:	e08c      	b.n	8005a56 <_printf_i+0x1be>
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005942:	6011      	str	r1, [r2, #0]
 8005944:	bf18      	it	ne
 8005946:	b21b      	sxthne	r3, r3
 8005948:	e7cf      	b.n	80058ea <_printf_i+0x52>
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	6825      	ldr	r5, [r4, #0]
 800594e:	1d18      	adds	r0, r3, #4
 8005950:	6010      	str	r0, [r2, #0]
 8005952:	0628      	lsls	r0, r5, #24
 8005954:	d501      	bpl.n	800595a <_printf_i+0xc2>
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	e002      	b.n	8005960 <_printf_i+0xc8>
 800595a:	0668      	lsls	r0, r5, #25
 800595c:	d5fb      	bpl.n	8005956 <_printf_i+0xbe>
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	296f      	cmp	r1, #111	; 0x6f
 8005962:	bf14      	ite	ne
 8005964:	220a      	movne	r2, #10
 8005966:	2208      	moveq	r2, #8
 8005968:	4852      	ldr	r0, [pc, #328]	; (8005ab4 <_printf_i+0x21c>)
 800596a:	2100      	movs	r1, #0
 800596c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005970:	6865      	ldr	r5, [r4, #4]
 8005972:	2d00      	cmp	r5, #0
 8005974:	60a5      	str	r5, [r4, #8]
 8005976:	f2c0 8095 	blt.w	8005aa4 <_printf_i+0x20c>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	f021 0104 	bic.w	r1, r1, #4
 8005980:	6021      	str	r1, [r4, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d13d      	bne.n	8005a02 <_printf_i+0x16a>
 8005986:	2d00      	cmp	r5, #0
 8005988:	f040 808e 	bne.w	8005aa8 <_printf_i+0x210>
 800598c:	4665      	mov	r5, ip
 800598e:	2a08      	cmp	r2, #8
 8005990:	d10b      	bne.n	80059aa <_printf_i+0x112>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	07db      	lsls	r3, r3, #31
 8005996:	d508      	bpl.n	80059aa <_printf_i+0x112>
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	bfde      	ittt	le
 80059a0:	2330      	movle	r3, #48	; 0x30
 80059a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059aa:	ebac 0305 	sub.w	r3, ip, r5
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	f8cd 8000 	str.w	r8, [sp]
 80059b4:	463b      	mov	r3, r7
 80059b6:	aa03      	add	r2, sp, #12
 80059b8:	4621      	mov	r1, r4
 80059ba:	4630      	mov	r0, r6
 80059bc:	f7ff fef6 	bl	80057ac <_printf_common>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d14d      	bne.n	8005a60 <_printf_i+0x1c8>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c8:	b005      	add	sp, #20
 80059ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ce:	4839      	ldr	r0, [pc, #228]	; (8005ab4 <_printf_i+0x21c>)
 80059d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	6821      	ldr	r1, [r4, #0]
 80059d8:	1d1d      	adds	r5, r3, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6015      	str	r5, [r2, #0]
 80059de:	060a      	lsls	r2, r1, #24
 80059e0:	d50b      	bpl.n	80059fa <_printf_i+0x162>
 80059e2:	07ca      	lsls	r2, r1, #31
 80059e4:	bf44      	itt	mi
 80059e6:	f041 0120 	orrmi.w	r1, r1, #32
 80059ea:	6021      	strmi	r1, [r4, #0]
 80059ec:	b91b      	cbnz	r3, 80059f6 <_printf_i+0x15e>
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	f022 0220 	bic.w	r2, r2, #32
 80059f4:	6022      	str	r2, [r4, #0]
 80059f6:	2210      	movs	r2, #16
 80059f8:	e7b7      	b.n	800596a <_printf_i+0xd2>
 80059fa:	064d      	lsls	r5, r1, #25
 80059fc:	bf48      	it	mi
 80059fe:	b29b      	uxthmi	r3, r3
 8005a00:	e7ef      	b.n	80059e2 <_printf_i+0x14a>
 8005a02:	4665      	mov	r5, ip
 8005a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a08:	fb02 3311 	mls	r3, r2, r1, r3
 8005a0c:	5cc3      	ldrb	r3, [r0, r3]
 8005a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a12:	460b      	mov	r3, r1
 8005a14:	2900      	cmp	r1, #0
 8005a16:	d1f5      	bne.n	8005a04 <_printf_i+0x16c>
 8005a18:	e7b9      	b.n	800598e <_printf_i+0xf6>
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	6825      	ldr	r5, [r4, #0]
 8005a1e:	1d18      	adds	r0, r3, #4
 8005a20:	6961      	ldr	r1, [r4, #20]
 8005a22:	6010      	str	r0, [r2, #0]
 8005a24:	0628      	lsls	r0, r5, #24
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	d501      	bpl.n	8005a2e <_printf_i+0x196>
 8005a2a:	6019      	str	r1, [r3, #0]
 8005a2c:	e002      	b.n	8005a34 <_printf_i+0x19c>
 8005a2e:	066a      	lsls	r2, r5, #25
 8005a30:	d5fb      	bpl.n	8005a2a <_printf_i+0x192>
 8005a32:	8019      	strh	r1, [r3, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	4665      	mov	r5, ip
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	e7b9      	b.n	80059b0 <_printf_i+0x118>
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	1d19      	adds	r1, r3, #4
 8005a40:	6011      	str	r1, [r2, #0]
 8005a42:	681d      	ldr	r5, [r3, #0]
 8005a44:	6862      	ldr	r2, [r4, #4]
 8005a46:	2100      	movs	r1, #0
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 f847 	bl	8005adc <memchr>
 8005a4e:	b108      	cbz	r0, 8005a54 <_printf_i+0x1bc>
 8005a50:	1b40      	subs	r0, r0, r5
 8005a52:	6060      	str	r0, [r4, #4]
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5e:	e7a7      	b.n	80059b0 <_printf_i+0x118>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4639      	mov	r1, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d0aa      	beq.n	80059c4 <_printf_i+0x12c>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	079b      	lsls	r3, r3, #30
 8005a72:	d413      	bmi.n	8005a9c <_printf_i+0x204>
 8005a74:	68e0      	ldr	r0, [r4, #12]
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	4298      	cmp	r0, r3
 8005a7a:	bfb8      	it	lt
 8005a7c:	4618      	movlt	r0, r3
 8005a7e:	e7a3      	b.n	80059c8 <_printf_i+0x130>
 8005a80:	2301      	movs	r3, #1
 8005a82:	464a      	mov	r2, r9
 8005a84:	4639      	mov	r1, r7
 8005a86:	4630      	mov	r0, r6
 8005a88:	47c0      	blx	r8
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d09a      	beq.n	80059c4 <_printf_i+0x12c>
 8005a8e:	3501      	adds	r5, #1
 8005a90:	68e3      	ldr	r3, [r4, #12]
 8005a92:	9a03      	ldr	r2, [sp, #12]
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	42ab      	cmp	r3, r5
 8005a98:	dcf2      	bgt.n	8005a80 <_printf_i+0x1e8>
 8005a9a:	e7eb      	b.n	8005a74 <_printf_i+0x1dc>
 8005a9c:	2500      	movs	r5, #0
 8005a9e:	f104 0919 	add.w	r9, r4, #25
 8005aa2:	e7f5      	b.n	8005a90 <_printf_i+0x1f8>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ac      	bne.n	8005a02 <_printf_i+0x16a>
 8005aa8:	7803      	ldrb	r3, [r0, #0]
 8005aaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab2:	e76c      	b.n	800598e <_printf_i+0xf6>
 8005ab4:	08005f1d 	.word	0x08005f1d
 8005ab8:	08005f2e 	.word	0x08005f2e

08005abc <_sbrk_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4c05      	ldr	r4, [pc, #20]	; (8005ad8 <_sbrk_r+0x1c>)
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	f7fa fd28 	bl	800051c <_sbrk>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_sbrk_r+0x1a>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_sbrk_r+0x1a>
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000358 	.word	0x20000358

08005adc <memchr>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	b2c9      	uxtb	r1, r1
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4290      	cmp	r0, r2
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	d101      	bne.n	8005aec <memchr+0x10>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e003      	b.n	8005af4 <memchr+0x18>
 8005aec:	781c      	ldrb	r4, [r3, #0]
 8005aee:	3001      	adds	r0, #1
 8005af0:	428c      	cmp	r4, r1
 8005af2:	d1f6      	bne.n	8005ae2 <memchr+0x6>
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd10      	pop	{r4, pc}

08005af8 <memcpy>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	1e43      	subs	r3, r0, #1
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d100      	bne.n	8005b04 <memcpy+0xc>
 8005b02:	bd10      	pop	{r4, pc}
 8005b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b0c:	e7f7      	b.n	8005afe <memcpy+0x6>

08005b0e <memmove>:
 8005b0e:	4288      	cmp	r0, r1
 8005b10:	b510      	push	{r4, lr}
 8005b12:	eb01 0302 	add.w	r3, r1, r2
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x1a>
 8005b18:	1e42      	subs	r2, r0, #1
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	d00a      	beq.n	8005b34 <memmove+0x26>
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0xc>
 8005b28:	4283      	cmp	r3, r0
 8005b2a:	d9f5      	bls.n	8005b18 <memmove+0xa>
 8005b2c:	1881      	adds	r1, r0, r2
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	42d3      	cmn	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memmove+0x28>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b3e:	e7f7      	b.n	8005b30 <memmove+0x22>

08005b40 <__malloc_lock>:
 8005b40:	4770      	bx	lr

08005b42 <__malloc_unlock>:
 8005b42:	4770      	bx	lr

08005b44 <_free_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4605      	mov	r5, r0
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d043      	beq.n	8005bd4 <_free_r+0x90>
 8005b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b50:	1f0c      	subs	r4, r1, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfb8      	it	lt
 8005b56:	18e4      	addlt	r4, r4, r3
 8005b58:	f7ff fff2 	bl	8005b40 <__malloc_lock>
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <_free_r+0x94>)
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	4610      	mov	r0, r2
 8005b62:	b933      	cbnz	r3, 8005b72 <_free_r+0x2e>
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6014      	str	r4, [r2, #0]
 8005b68:	4628      	mov	r0, r5
 8005b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6e:	f7ff bfe8 	b.w	8005b42 <__malloc_unlock>
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	d90b      	bls.n	8005b8e <_free_r+0x4a>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	1862      	adds	r2, r4, r1
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	bf01      	itttt	eq
 8005b7e:	681a      	ldreq	r2, [r3, #0]
 8005b80:	685b      	ldreq	r3, [r3, #4]
 8005b82:	1852      	addeq	r2, r2, r1
 8005b84:	6022      	streq	r2, [r4, #0]
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6004      	str	r4, [r0, #0]
 8005b8a:	e7ed      	b.n	8005b68 <_free_r+0x24>
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	b10a      	cbz	r2, 8005b96 <_free_r+0x52>
 8005b92:	42a2      	cmp	r2, r4
 8005b94:	d9fa      	bls.n	8005b8c <_free_r+0x48>
 8005b96:	6819      	ldr	r1, [r3, #0]
 8005b98:	1858      	adds	r0, r3, r1
 8005b9a:	42a0      	cmp	r0, r4
 8005b9c:	d10b      	bne.n	8005bb6 <_free_r+0x72>
 8005b9e:	6820      	ldr	r0, [r4, #0]
 8005ba0:	4401      	add	r1, r0
 8005ba2:	1858      	adds	r0, r3, r1
 8005ba4:	4282      	cmp	r2, r0
 8005ba6:	6019      	str	r1, [r3, #0]
 8005ba8:	d1de      	bne.n	8005b68 <_free_r+0x24>
 8005baa:	6810      	ldr	r0, [r2, #0]
 8005bac:	6852      	ldr	r2, [r2, #4]
 8005bae:	4401      	add	r1, r0
 8005bb0:	6019      	str	r1, [r3, #0]
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	e7d8      	b.n	8005b68 <_free_r+0x24>
 8005bb6:	d902      	bls.n	8005bbe <_free_r+0x7a>
 8005bb8:	230c      	movs	r3, #12
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	e7d4      	b.n	8005b68 <_free_r+0x24>
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	1821      	adds	r1, r4, r0
 8005bc2:	428a      	cmp	r2, r1
 8005bc4:	bf01      	itttt	eq
 8005bc6:	6811      	ldreq	r1, [r2, #0]
 8005bc8:	6852      	ldreq	r2, [r2, #4]
 8005bca:	1809      	addeq	r1, r1, r0
 8005bcc:	6021      	streq	r1, [r4, #0]
 8005bce:	6062      	str	r2, [r4, #4]
 8005bd0:	605c      	str	r4, [r3, #4]
 8005bd2:	e7c9      	b.n	8005b68 <_free_r+0x24>
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000094 	.word	0x20000094

08005bdc <_realloc_r>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	4607      	mov	r7, r0
 8005be0:	4614      	mov	r4, r2
 8005be2:	460e      	mov	r6, r1
 8005be4:	b921      	cbnz	r1, 8005bf0 <_realloc_r+0x14>
 8005be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bea:	4611      	mov	r1, r2
 8005bec:	f7ff bc32 	b.w	8005454 <_malloc_r>
 8005bf0:	b922      	cbnz	r2, 8005bfc <_realloc_r+0x20>
 8005bf2:	f7ff ffa7 	bl	8005b44 <_free_r>
 8005bf6:	4625      	mov	r5, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfc:	f000 f814 	bl	8005c28 <_malloc_usable_size_r>
 8005c00:	42a0      	cmp	r0, r4
 8005c02:	d20f      	bcs.n	8005c24 <_realloc_r+0x48>
 8005c04:	4621      	mov	r1, r4
 8005c06:	4638      	mov	r0, r7
 8005c08:	f7ff fc24 	bl	8005454 <_malloc_r>
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0f2      	beq.n	8005bf8 <_realloc_r+0x1c>
 8005c12:	4631      	mov	r1, r6
 8005c14:	4622      	mov	r2, r4
 8005c16:	f7ff ff6f 	bl	8005af8 <memcpy>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	f7ff ff91 	bl	8005b44 <_free_r>
 8005c22:	e7e9      	b.n	8005bf8 <_realloc_r+0x1c>
 8005c24:	4635      	mov	r5, r6
 8005c26:	e7e7      	b.n	8005bf8 <_realloc_r+0x1c>

08005c28 <_malloc_usable_size_r>:
 8005c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2c:	1f18      	subs	r0, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfbc      	itt	lt
 8005c32:	580b      	ldrlt	r3, [r1, r0]
 8005c34:	18c0      	addlt	r0, r0, r3
 8005c36:	4770      	bx	lr

08005c38 <_init>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr

08005c44 <_fini>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr
